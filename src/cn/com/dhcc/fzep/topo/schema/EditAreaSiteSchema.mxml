<?xml version="1.0" encoding="utf-8"?>
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009"
			   xmlns:s="library://ns.adobe.com/flex/spark"
			   xmlns:mx="library://ns.adobe.com/flex/mx"
			   xmlns:cedo="cn.com.dhcc.fzep.topo.components.*"
			   xmlns:xtreme="xtreme.core.*"
			   xmlns:services="services.*"
			   minWidth="955" minHeight="600" applicationComplete="applicationComplete()"
			    >
	<fx:Style>
		@namespace s "library://ns.adobe.com/flex/spark";
		@namespace mx "library://ns.adobe.com/flex/mx";
		@namespace xtreme "xtreme.core.*";
	</fx:Style>
	<fx:Declarations>
		<!-- 将非可视元素（例如服务、值对象）放在此处 -->
		<s:TitleWindow id="showInfoWin" width="280" title="详细信息" close="showInfoWin_closeHandler(event)" >
				<mx:DataGrid id="headerShowInfo" showHeaders="false" width="30%" 
							 borderVisible="false" textAlign="right">
					<mx:dataProvider>
						<fx:Object name="名        称" />
						<fx:Object name="地        址" />
						<fx:Object name="负  责  人" />
						<fx:Object name="联系电话" />
						<fx:Object name="备        注" />
					</mx:dataProvider>
					<mx:columns >
						<mx:DataGridColumn dataField="name" fontWeight="normal" />
					</mx:columns>
				</mx:DataGrid>
				<mx:DataGrid id="equipInfoGrid" x="{headerShowInfo.width}" showHeaders="false" width="75%"
							 borderVisible="false">
					<mx:columns>
						<mx:DataGridColumn dataField="name" wordWrap="true" />
					</mx:columns>
				</mx:DataGrid>
		</s:TitleWindow>
		<services:EquipSchema id="equipSchema"
							  fault="Alert.show(event.fault.faultString + '\n' + event.fault.faultDetail)"
							  showBusyCursor="true"/>
		<s:CallResponder id="saveSchemaResult" result="saveSchemaResult_resultHandler(event)" fault="saveSchemaResult_faultHandler(event)"/>
		<s:CallResponder id="getSchemaResult" result="getSchemaResult_resultHandler(event)" fault="getSchemaResult_faultHandler(event)"/>
		<services:ShowSchema id="showSchema"
							 fault="Alert.show(event.fault.faultString + '\n' + event.fault.faultDetail)"
							 showBusyCursor="true"/>
		<s:CallResponder id="getSiteInfoByIdResult" result="getSiteInfoByIdResult_resultHandler(event)"/>
		<services:SiteEquip id="siteEquip"
							fault="Alert.show(event.fault.faultString + '\n' + event.fault.faultDetail)"
							showBusyCursor="true"/>
		<s:CallResponder id="getCableBySiteArrayResult" result="getCableBySiteArrayResult_resultHandler(event)"/>
		<services:Equip id="equip"
						fault="Alert.show(event.fault.faultString + '\n' + event.fault.faultDetail)"
						showBusyCursor="true"/>
	</fx:Declarations>
	<fx:Script>
		<![CDATA[
			import com.adobe.serialization.json.JSON;
			
			import mx.collections.ArrayCollection;
			import mx.collections.IList;
			import mx.controls.Alert;
			import mx.controls.Image;
			import mx.events.CloseEvent;
			import mx.events.FlexEvent;
			import mx.managers.PopUpManager;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			import mx.utils.ObjectUtil;
			
			import cn.com.dhcc.fzep.topo.components.SchemaElementComponent;
			import cn.com.dhcc.fzep.topo.components.SiteComponent;
			import cn.com.dhcc.fzep.topo.poao.SchemaElementsInfo;
			import cn.com.dhcc.fzep.topo.utils.ScriptUtils;
			import cn.com.dhcc.fzep.topo.utils.TopoUtils;
			
			import valueObjects.Cable;
			import valueObjects.Schema;
			import valueObjects.Site;
			
			import xtreme.core.Root;
			import xtreme.scene.SceneManager;
			import xtreme.scene.entity.Entity;
			import xtreme.scene.entity.shapes.DynamicConnector;
			import xtreme.scene.entity.shapes.FlexComponent;
			[Bindable]
			public var areaId:int = -1;
			[Bindable]
			public var schemaID:int = -1;
			
			public var dSelectWidth:int;
			protected var viewContextMenu:ContextMenu;    //视图右键 菜单
			protected var siteContextMenu:ContextMenu;    //站点 右键 菜单
			protected var cableContextMenu:ContextMenu;    //光缆右键 菜单
			private function applicationComplete() : void
			{
				var schemaId:Object = root.loaderInfo.parameters['schemaID'];
				if(schemaId){
					var sc:int = int(schemaId)//root.loaderInfo.parameters['siteID'];
					if(sc){
						schemaID = sc;
						getSchema(String(schemaID));
					}else {
						Alert.show("视图ID无效", "参数错误");
					}
				}else{
					Alert.show("未传入视图ID", "参数错误");
				}
				stage.align = StageAlign.TOP_LEFT;
				stage.scaleMode = StageScaleMode.NO_SCALE;
				stage.quality = StageQuality.HIGH;
				/**
				var console:Console = Console.instance;
				if (console == null)
					console = new Console(stage);
				view.getRoot().layerManager.enableContextMenu();
				view.registerBuildInCommand(console);
				 */ 
				view.getRoot().navigationView.visible = true;
				
				dSelectWidth = operGroup.width;
				/*
				//视图右键菜单
				viewContextMenu = new ContextMenu(); 
				viewContextMenu.hideBuiltInItems(); 
				var tets:ContextMenuItem = new ContextMenuItem("从图中删除", true); 
				viewContextMenu.customItems.push(tets); 
				view.contextMenu = viewContextMenu;
				*/
				//站点右键菜单
				siteContextMenu = new ContextMenu(); 
				siteContextMenu.hideBuiltInItems(); 
				var delCmi:ContextMenuItem = new ContextMenuItem("从图中删除", true); 
				delCmi.addEventListener(ContextMenuEvent.MENU_ITEM_SELECT, deleteSiteFromSchema);
				siteContextMenu.customItems.push(delCmi); 
				var detailCmi:ContextMenuItem = new ContextMenuItem("站点基础信息", false); 
				detailCmi.addEventListener(ContextMenuEvent.MENU_ITEM_SELECT, showSiteDetails );
				siteContextMenu.customItems.push(detailCmi); 
				//光缆右键菜单
				cableContextMenu= new ContextMenu(); 
				cableContextMenu.hideBuiltInItems(); 
				var relation:ContextMenuItem = new ContextMenuItem("从图中删除", true); 
				relation.addEventListener(ContextMenuEvent.MENU_ITEM_SELECT, deleteCableFromSchema);
				cableContextMenu.customItems.push(relation); 
				
			}
			
			private function showSiteDetails(evt:ContextMenuEvent):void{
				var sceneManager:SceneManager = Root.instance.sceneManager;
				var entity:Entity = sceneManager.getEntity(evt.contextMenuOwner.name);
				if(entity is FlexComponent){
					var flexComponent:FlexComponent = entity as FlexComponent;
					var siteId:String = getSiteId(flexComponent);
					if(siteId!=null){
						getSiteInfoById(siteId);
					}
				}else{
					Alert.show("错误的位置调用","异常");
				}
			}
			/**
			 * <b>工具:</b><br />
			 * 得到对应站点的ID 
			 */
			private function getSiteId(flexComponent:FlexComponent):String{
				if(flexComponent.component is SchemaElementComponent){
					var eleCom:SchemaElementComponent = flexComponent.component as SchemaElementComponent;
					var eleInfo:SchemaElementsInfo = eleCom.eleInfo;
					return eleInfo.id;
				}else if ( flexComponent.component is SiteComponent ){
					var siteCom:SiteComponent = flexComponent.component as SiteComponent;
					var site:Site = siteCom.site;
					return site.siteId;
				}
				return null;
			}
			/**
			 * 从界面视图中删除站点(包括对应的光缆)
			 */
			private function deleteSiteFromSchema(evt:ContextMenuEvent):void{
				var sceneManager:SceneManager = Root.instance.sceneManager;
				var delEntity:Entity = sceneManager.getEntity(evt.contextMenuOwner.name);
				if(delEntity is FlexComponent){
					var flexComponent:FlexComponent = delEntity as FlexComponent;
					var siteId:String = getSiteId(flexComponent);
					
					var delSuccess:Boolean = sceneManager.removeEntity(delEntity);
					if(delSuccess){
						var entityList:Array = sceneManager.entityList();
						var entityListToDel:Array = new Array();
						for (var i:int = 0; i < entityList.length; i++) 
						{
							var entity:Entity = entityList[i] as Entity;
							if(entity is DynamicConnector){
								var connector:DynamicConnector = entity as DynamicConnector;
								if(connector.customData as Cable){
									var cableObj:Cable = connector.customData as Cable;
									var related:Boolean = (siteId==cableObj.cableEndId || siteId==cableObj.cableStartId);
									if(related){
										entityListToDel.push(entity);
									}
								}
							}
						}
						for (var j:int = 0; j < entityListToDel.length; j++) 
						{
							sceneManager.removeEntity(entityListToDel[j]);
						}
						
						selector.searchSite();
					}else{
						Alert.show("删除失败","出错了");
					}
				
				}else{
					//do nothing
				}
				computeSiteNumber();
				
			}	
			/**
			 * 从图中删除光缆
			 */
			private function deleteCableFromSchema(evt:ContextMenuEvent):void{
				var sceneManager:SceneManager = Root.instance.sceneManager;
				var delEntity:Entity = sceneManager.getEntity(evt.contextMenuOwner.name);
				var delSuccess:Boolean = sceneManager.removeEntity(delEntity);
				if(!delSuccess){
					Alert.show("删除失败","出错了");
				}
			}
			
			/**
			 * 添加站点到视图中
			 */
			private function addEquip(arr:IList):void {
				if(siteNumber+arr.length<=SITE_NUMBER_LIMIT){
					for (var i:int = 0; i < arr.length; i++) 
					{
						var sceneMgr:SceneManager = Root.instance.sceneManager;
						var equipO:Object = arr.getItemAt(i);
						var equip:SiteComponent;
						var fcName:String;
						if(equipO is Site){
							equip = new SiteComponent();
							equip.site = equipO as Site;
							equip.contextMenu = siteContextMenu;
							fcName = ObjectUtil.getClassInfo(Site).name + equip.site.siteId;
						}
						if(!sceneMgr.existsEntity(fcName)){
							var equipFC:FlexComponent = new FlexComponent(fcName, equip);
							equipFC.draggable = true;
							equipFC.editable = false;
							equipFC.x = sceneMgr.viewport.x + 10;
							equipFC.y = sceneMgr.viewport.y + 70*(i+1);
							equipFC.width = 60;
							equipFC.height = 60;
							sceneMgr.addEntity(equipFC);
						}else{
							Alert.show("设备已存在,不能重复添加。");
						}
					}
					computeSiteNumber();
				}else {
					Alert.show("超过站点视图的最大数量限制:" + SITE_NUMBER_LIMIT);
				}
			}
			
			/**
			 * 关闭信息展示弹出窗口
			 */
			protected function showInfoWin_closeHandler(event:CloseEvent):void { 
				PopUpManager.removePopUp(showInfoWin);   
			}   
			/**
			 * 展示站点详细信息
			 */
			public function showDetails(site:Site):void{
				//Alert.show( site.siteName + site.siteAdress +  site.connactName +  site.connactNumber +  site.descp);
				showInfoWin.title = site.siteName;    
				
				PopUpManager.addPopUp(showInfoWin, this, true);  
				PopUpManager.centerPopUp(showInfoWin);  
				equipInfoGrid.dataProvider = new Array(
					//{name: area.areaId},
					{name: site.siteName },
					{name: site.siteAdress},
					{name: site.connactName},
					{name: site.connactNumber},
					{name: site.descp}
				);
			}
			protected function hide_clickHandler(event:MouseEvent):void
			{
				if(operGroup.visible){
					operGroup.width = -1;
					operGroup.visible = false;
				}else{
					operGroup.width = dSelectWidth;
					operGroup.visible = true;
				}
			}
						
			/**
			 * 保存拓扑图 
			 */
			protected function saveSchema_clickHandler(event:MouseEvent):void
			{
				Alert.yesLabel = "保存";
				Alert.cancelLabel = "取消";
				Alert.show("确认保存?", "视图名称 : " + schemaName.text , Alert.YES | Alert.CANCEL, this,doSaveSchema);
				
			}
			private function doSaveSchema(event:CloseEvent):void {
				if(event.detail == Alert.YES)
				{
					var sceneMgr:SceneManager = Root.instance.sceneManager;
					var equipJSONData:String = TopoUtils.generateJSON(sceneMgr.entityList());
					
					//Alert.show(equipJSONData);
					
					var argsObj:Object = new Object();
					argsObj.viewX = sceneMgr.viewport.x;
					argsObj.viewY = sceneMgr.viewport.y;
					
					var schema:Schema = new Schema();
					schema.schemaId = String(schemaID);
					if(areaId){
						schema.areaId = String(areaId);
						schema.schemaType = "1";
					}else{
						schema.schemaType = "2";
					}
					schema.schemaName = schemaName.text;
					//schema.schemaNote = schemaNote.text;
					var args:String = JSON.encode(argsObj);
					var base:String = JSON.encode(schema);
					//保存
					saveSchema2(base, equipJSONData, args);
				}
			}
			/**
			 * 搜索光缆图
			 */
			protected function buildCable_clickHandler(event:MouseEvent):void
			{
				var sceneMgr:SceneManager = Root.instance.sceneManager;
				var entityList:Array = sceneMgr.entityList();
				var siteIdArray:ArrayCollection = new ArrayCollection();
				for (var i:int = 0; i < entityList.length; i++) 
				{
					var entity:Entity = entityList[i] as Entity;
					if(entity is FlexComponent){
						var flexComponent:FlexComponent = entity as FlexComponent;
						if(flexComponent.component is SchemaElementComponent){
							var eleCom:SchemaElementComponent = flexComponent.component as SchemaElementComponent;
							var eleInfo:SchemaElementsInfo = eleCom.eleInfo;
							siteIdArray.addItem(int(eleInfo.id));
						}else if ( flexComponent.component is SiteComponent ){
							var siteCom:SiteComponent = flexComponent.component as SiteComponent;
							var site:Site = siteCom.site;
							siteIdArray.addItem(int(site.siteId));
						}
					}else if(entity is DynamicConnector){
						
					}
				}
				//Alert.show(String(siteIdArray));
				//TODO 搜索光缆图
				
				getCableBySiteArray(siteIdArray);
			}
			
			protected function saveSchema2(arg0:String,arg1:String,arg2:String):void
			{
				saveSchemaResult.token = equipSchema.saveSchema(arg0, arg1,arg2);
			}
			
			protected function saveSchemaResult_resultHandler(event:ResultEvent):void
			{
				Alert.okLabel = "继续编辑";
				Alert.cancelLabel = "关闭窗口";
				if(event.result==true){
					Alert.show("保存成功", "执行结果", Alert.OK| Alert.CANCEL, this, closeBrowserWindow);
				}else{
					Alert.show( "保存失败", "执行结果", Alert.OK, this, closeBrowserWindow);
				}
			}
			
			protected function saveSchemaResult_faultHandler(event:FaultEvent):void
			{
				Alert.show("保存失败.","错误");
			}
			
			protected function  closeBrowserWindow(event:CloseEvent):void {
				if(event.detail == Alert.CANCEL){
					navigateToURL(new URLRequest('javascript:window.opener=null;window.close()'),'_self')
				}else if(event.detail == Alert.OK){
					getSchema(String(schemaID));
				}
			}
			protected function getSchema(arg0:String):void
			{
				getSchemaResult.token = showSchema.getSchema(arg0);
			}
			
			protected function getSchemaResult_resultHandler(event:ResultEvent):void
			{
				var schema:Schema = event.result as Schema;
				
				schemaName.text = schema.schemaName;
				if(schema.areaId){
					areaId = int(schema.areaId);
				}
				//loadSchema(schema.schemaData);
				TopoUtils.loadSchema(Root.instance.sceneManager, schema.schemaData,siteContextMenu,cableContextMenu, siteComponent_doubleClickHandler, true);
				selector.setExceptList(getExceptIdListInSchema().toArray());
				selector.loadValidSite();
				
				computeSiteNumber();
			}
			
			protected function getSchemaResult_faultHandler(event:FaultEvent):void
			{
				Alert.show("获取数据失败","错误")
			}
			
			protected function siteComponent_doubleClickHandler(event:MouseEvent):void
			{
				var eleCom:SchemaElementComponent = event.currentTarget as SchemaElementComponent;
				var eleInfo:SchemaElementsInfo = eleCom.eleInfo;
				var topoBasePath:String = ScriptUtils.getRoot(root.loaderInfo.url) + "topo/";
				ScriptUtils.openTabWindow(topoBasePath + "siteEquipment.jsp?siteId="+eleInfo.id,"站点详细");
			}
			/**
			 * 得到排除在外的设备ID 集合
			 */
			protected function getExceptIdListInSchema():ArrayCollection{
				var enList:Array = Root.instance.sceneManager.entityList();
				var idlistExcept:ArrayCollection = new ArrayCollection();
				for (var i:int = 0; i < enList.length; i++) 
				{
					if(enList[i] is FlexComponent){
						var equipFC:FlexComponent = enList[i] as FlexComponent;
						var equipObj:Object = equipFC.component;
						if(equipObj is SiteComponent){ 
							var siteComponent:SiteComponent = equipObj as SiteComponent;
							var equipId:String = siteComponent.site.siteId;
							idlistExcept.addItem(int(equipId));
						}else if(equipObj is SchemaElementComponent){
							var siteECom:SchemaElementComponent = equipObj as SchemaElementComponent;
							var seInfo:SchemaElementsInfo = siteECom.eleInfo;
							idlistExcept.addItem(int(seInfo.id));
						}
					}
				}
				return idlistExcept;
			}
			
			
			
			protected function getSiteInfoById(arg0:String):void
			{
				getSiteInfoByIdResult.token = siteEquip.getSiteInfoById(arg0);
			}
			
			protected function getSiteInfoByIdResult_resultHandler(event:ResultEvent):void
			{
				var site:Site = event.result as Site;
				showDetails(site);
			}
			
			
			protected function getCableBySiteArray(arg0:ArrayCollection):void
			{
				getCableBySiteArrayResult.token = equip.getCableBySiteArray(arg0);
			}
			
			protected function getCableBySiteArrayResult_resultHandler(event:ResultEvent):void
			{
				var sceneMgr:SceneManager = Root.instance.sceneManager;
				var cableList:ArrayCollection = event.result as ArrayCollection;
				for (var j:int = 0; j < cableList.length; j++) 
				{
					var cableObj:Cable = cableList.getItemAt(j) as Cable;
					TopoUtils.addCableToSchema(sceneMgr, cableObj,cableContextMenu);
				}
			}
			[Bindable]
			protected var siteNumber:Number=0;
			
			protected function computeSiteNumber():Number{
				var enList:Array = Root.instance.sceneManager.entityList();
				var idlistExcept:ArrayCollection = new ArrayCollection();
				var siteTotalNumber:Number = 0;
				for (var i:int = 0; i < enList.length; i++) 
				{
					if(enList[i] is FlexComponent){
						var equipFC:FlexComponent = enList[i] as FlexComponent;
						var equipObj:Object = equipFC.component;
						if(equipObj is SiteComponent|| equipObj is SchemaElementComponent){
							siteTotalNumber++;
						}
					}
				}
				siteNumber = siteTotalNumber;
				return siteTotalNumber;
			}
			
			[Bindable]
			protected var SITE_NUMBER_LIMIT:Number = 500;    //加入站点的最大限制数量
			
		]]>
	</fx:Script>
		
	<s:layout>
		<s:HorizontalLayout gap="0" paddingBottom="0" paddingLeft="0" paddingRight="0" >
		</s:HorizontalLayout>
	</s:layout>
	<s:VGroup id="operGroup" height="100%" gap="0"  visible="true" >	
		<cedo:SiteSelector id="selector" selectedItem="addEquip"  areaId="{areaId}" exceptedInSchema="{getExceptIdListInSchema}" ></cedo:SiteSelector>
	</s:VGroup>
	<s:VGroup id="hide" width="10" height="100%" gap="0" toolTip="隐藏/展示选择框"
			  click="hide_clickHandler(event)"  buttonMode="true"  opaqueBackground="0xDCDCDC" >
	</s:VGroup>
	<s:Group width="100%" height="100%" x="0" y="5" >
		<xtreme:XtremeComponent name="view" id="view" width="100%" height="100%"  />
		<mx:HBox backgroundAlpha="0"  horizontalAlign="left" width="100%" paddingTop="10" paddingLeft="10">
			<mx:Image source="@Embed('assets/btn_info_48.png')" width="16" height="16" toolTip="视图信息">
			</mx:Image>
			<mx:Label id="schemaName"   >
			</mx:Label>
			<mx:Label text="["   >
			</mx:Label>
			<mx:LinkButton id="saveSchema" label="保存视图"  click="saveSchema_clickHandler(event)">
			</mx:LinkButton>
			<mx:LinkButton id="buildCable" label="检测视图中存在的光缆连接" toolTip="检测途中站点之间是否存在光缆" click="buildCable_clickHandler(event)">
			</mx:LinkButton>
			<mx:Label text="]"   />
			
			<mx:Label text="已包含{siteNumber}个站点,还能加入{SITE_NUMBER_LIMIT-siteNumber}个站点"   />
			<mx:Spacer width="100%" />
			<mx:Label text="提示：按住鼠标左键不放可以放大缩小视图" />
			<mx:LinkButton visible="false" id="refresh" label="更新" toolTip="更新图中设备状态，去掉其中无效的设备。" click="buildCable_clickHandler(event)">
			</mx:LinkButton>
		</mx:HBox>
	</s:Group>
		
</s:Application>
