<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" width="100%" height="100%" minHeight="300" minWidth="300" >
	<fx:Declarations>
		<!-- 将非可视元素（例如服务、值对象）放在此处 -->
		
	</fx:Declarations>
	<fx:Script>
		<![CDATA[
			import com.adobe.serialization.json.JSON;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.core.UIComponent;
			import mx.graphics.SolidColorStroke;
			import mx.utils.ObjectUtil;
			
			import spark.components.Group;
			import spark.components.VGroup;
			import spark.primitives.Line;
			
			import cn.com.dhcc.fzep.topo.components.GPRSComponent;
			import cn.com.dhcc.fzep.topo.components.ThreeLayerSwitchComponent;
			
			import valueObjects.Cable;
			import valueObjects.GPRS;
			import valueObjects.Site;
			import valueObjects.ThreeLayerSwitch;
			[Embed(source="assets/buttons/btn_square_32.png")]
			public var interImg:Class;
			
			[Bindable]
			public var site:Site;
			
			[Embed(source="assets/tag_green_16.png")]
			public var tagsImg:Class;
			private var _equipList:Array = new Array();
			
			private var _cableList:Array = new Array();

			
			private var sprite:Sprite;
			private var uic:UIComponent;
			
			public function get equipNumber():int{
				return _equipList.lenght;
			}
			private var TAG_WIDTH:Number = 7;    //连接点长宽度
			/**
			 * 设置设备view对象数组
			 */
			[ArrayElementType("valueObjects.EquipmentVO")]
			public function set equipList(equipList:Array):void{
				_equipList = equipList;
				for (var i:int = 0; i < _equipList.length; i++) 
				{
					/*
					var equip:Object =  _equipList[i];
					var hGroup:HGroup = new HGroup();
					hGroup.height = TAG_WIDTH;
					hGroup.id = equip['type'] + equip['id'];
					hGroup.verticalAlign = "middle";
					hGroup.y = i*60;
					var equipComponent:UIComponent = getEquipComponent(equip);
					if(equipComponent){
						hGroup.addElement(equipComponent);
					}
					equipContainer.addElement(hGroup);
					*/
					
					var equip:Object =  _equipList[i];
					var equipComponent:UIComponent = getEquipComponent(equip);
					var assetsEquip:AssetsEquipment = new AssetsEquipment();
					assetsEquip.y = i*assetsEquip.componentHeight;
					assetsEquip.id = equip['type'] + equip['id'];
					if(equipComponent){
						assetsEquip.equipment = equipComponent;
					}
					equipContainer.addElement(assetsEquip);
				}
			}
			/**
			 * 得到设备显示组件
			 */
			private function getEquipComponent(equip:Object):UIComponent{
				var eType:String = equip['type'];
				var eName:String =  equip['name'];
				if(eType=='l3layer'){
					var l3Layer:ThreeLayerSwitchComponent = new ThreeLayerSwitchComponent();
					var l3Switch:ThreeLayerSwitch = new ThreeLayerSwitch();
					l3Switch.switchName = eName;
					l3Layer.l3switch = l3Switch;
					return l3Layer;
				}else if(eType){
					var gprsComponet:GPRSComponent = new GPRSComponent();
					var gprs:GPRS = new GPRS();
					gprs.gprsName = eName;
					gprsComponet.gprs = gprs;
					return gprsComponet;
				}else{
					return null;
				}
			}
			private var CABLE_IN_WIDTH:Number = 10;    //光缆连接点长宽度
			private var CABLE_WEIGHT:Number = 3;    //光缆宽度
			/**
			 * 设置光缆列表
			 */
			[ArrayElementType("valueObjects.Cable")]
			public function set cableList(cabList:Array):void{
				_cableList = cabList;
				for (var i:int = 0; i < cabList.length; i++) 
				{
					if(i>1){
						break;
					}
					var vGroup:VGroup = new VGroup();
					var cable:Object = cabList[i];
					/*
					var label:Label = new Label();
					label.text = cable['cableName'];
					label.setStyle("color",lineColors[i%lineColors.length]);
					label.setStyle("fontSize",10);
					vGroup.addElement(label);
					*/
					var img:Image = new Image();
					img.width = CABLE_IN_WIDTH;
					img.height = CABLE_IN_WIDTH;
					img.source = tagsImg;
					img.toolTip = cable['cableName'];
					vGroup.addElement(img);
					vGroup.horizontalAlign = "center";
					vGroup.id = CABLE_INTERFACE_ID_TAG + cable['cableId'];
					vGroup.x = i*relationContainer.width;
					vGroup.width = 30;
					vGroup.y = i==0?0:SContainer.height;
					
					cableGroup.addElement(vGroup);
					/*
					var cableInfo:Label = new Label();
					cableInfo.text = cable['cableName'];
					cableInfo.x = cableGroup.x + vGroup.x;
					cableInfo.y = relationContainer.height;
					relationContainer.addElement(cableInfo);
					*/
					var line:Line = new Line();
					line.xFrom = cableGroup.x + vGroup.x;//(i+1)*CABLE_IN_WIDTH;
					line.yFrom = i*10;
					line.xTo =  cableGroup.x +  vGroup.x;//(i+1)*CABLE_IN_WIDTH;
					//line.yTo = relationContainer.height+(i-1)*10;
					if(i==0){
						line.yTo = relationContainer.height-10;
					}else if(i==1){
						line.yTo = relationContainer.height;
					}
					
					line.id = ObjectUtil.getClassInfo(Cable).name + cable['cableId'];
					
					var stroke:SolidColorStroke = new SolidColorStroke();
					stroke.weight = CABLE_WEIGHT;
					stroke.caps = CapsStyle.ROUND;
					stroke.color = lineColors[i%lineColors.length];
					line.stroke = stroke;
					
					relationContainer.addElement(line);
				}
			}
			public function get cableList():Array{
				return _cableList;
			}
			private var CABLE_INTERFACE_ID_TAG:String = "_CableConnectorInterface_";
			[Bindable]
			private var _connJsonData:String;
			/**
			 * 连接情况json对象
			 */
			public function set connJsonData(data:String):void {
				//Alert.show("setCon");
				_connJsonData = data;
				connectCableAndEquip();
			}
			public function connectCableAndEquip():void{
				//Alert.show( _connJsonData);
				var arr:Array = (JSON.decode(String(_connJsonData)) as Array);  
				var arrCol:ArrayCollection = new ArrayCollection(arr);  
				//Alert.show( arrCol.length+'');
				var cableX:Number = -1;
				var cableColor:uint = 0;
				for (var i:int = 0; i < arrCol.length; i++) 
				{
					var connInfo:Object = arrCol.getItemAt(i);
					var cableId:String = connInfo['cableId'];
					var deviceId:String = connInfo['deviceId'];
					var cableComName:String = ObjectUtil.getClassInfo(Cable).name + cableId;
					/*
					 * 定位对应光缆
					 */
					for (var j:int = 0; j < relationContainer.numElements; j++) 
					{
						var ele:Object = relationContainer.getElementAt(j);
						if(ele.id == cableComName){
							var cableLine:Line = ele as Line;
							cableX = cableLine.xFrom;
							var stroke:SolidColorStroke = cableLine.stroke as SolidColorStroke;
							cableColor = stroke.color;
							break;
						}
						
					}
					
					if(cableX>-1){
						/*
						 * 查找设备 并和光缆连接
						 */
						for (var k:int = 0; k < equipContainer.numElements; k++) 
						{
							var eles:HGroup = equipContainer.getElementAt(k) as HGroup;
							var isTargetEquip:Boolean = false;
							isTargetEquip = (eles.id== connInfo['deviceType']+deviceId);
							if(isTargetEquip){
								var targetX:Number = equipContainer.x + eles.width ;
								//Alert.show(eles.y+'');
								var targetY:Number = equipContainer.y + eles.y;// +TAG_WIDTH/2;//  + k*12;
								var line:Line = new Line();
								line.xFrom = cableX;
								line.yFrom = targetY;
								line.xTo = targetX;
								line.yTo = targetY;
								
								var strokes:SolidColorStroke = new SolidColorStroke();
								strokes.weight = 2;
								strokes.caps=CapsStyle.ROUND;
								strokes.color = cableColor;
								line.stroke = strokes;
								
								var label:Label = new Label();
								label.text = connInfo['fiberNum'];
								label.toolTip = "纤芯编号:" + connInfo['fiberNum'];
								label.setStyle("color", cableColor);
								
								var fiNumSize:uint = 10;
								label.setStyle("fontSize",fiNumSize);
								relationContainer.addElement(label);
								label.x = line.xTo-fiNumSize*2;
								label.y = line.yTo-fiNumSize;
								
								relationContainer.addElement(line);
								break;
							}else{}
						}
						
					}
				}
				
			}
			
			//光缆颜色
			[ArrayElementType("uint")]
			private var lineColors:Array =  new Array(0x5ca1d7,0x9dd6f4,0x725746, 0xff9f64);
			/**
			 * 连接到光缆 返回出口坐标信息
			 */
			public function connectionToCable(targetCableId:String):Point{
				for (var i:int = 0; i < cableGroup.numElements; i++) 
				{
					var cable:VGroup = cableGroup.getElementAt(i) as VGroup;
					var gName:String = cable.id;
					var cablesId:String = gName.split(CABLE_INTERFACE_ID_TAG)[1];
					if(cablesId == targetCableId){
						
						var pos:Point = new Point();
						pos.x = cableGroup.x + cable.width/2 + cable.x;
						pos.y = cableGroup.y  + cable.y;
						//Alert.show(cable.height+'');
						/*
						var xInSiteCon:Number = cable.width/2 + cable.x;
						var yInSiteCon:Number = cable.y;
						var line:Line = new Line();
						line.xFrom = pos.x;
						line.yFrom = yInSiteCon;
						line.xTo =  pos.x ;
						line.yTo = pos.y;
						var strokes:SolidColorStroke = new SolidColorStroke();
						strokes.weight = 3;
						strokes.caps=CapsStyle.ROUND;
						strokes.color = 0x3A9966;
						line.stroke = strokes;
						SContainer.addElement(line);
						*/
						return pos;
					}else{
						continue;
					}
				}
				return null;
			}
			
			
		]]>
	</fx:Script>
	<s:BorderContainer height="100%" width="100%" borderVisible="false"  >
		<s:layout>
			<s:VerticalLayout />
		</s:layout>
		<s:BorderContainer id="SContainer" height="100%" width="100%" borderVisible="false"  cornerRadius="10" >
			<s:BorderContainer id="relationContainer" x="15" y="{(titCon.height + titCon.y)/2}" height="100%"  width="100%" borderAlpha="0.5" cornerRadius="10" borderVisible="true">
				<s:BorderContainer x="150" y="50" id="equipContainer"  height="100%" width="90%" cornerRadius="10"  borderVisible="false" >
				</s:BorderContainer>
			</s:BorderContainer>
			<s:BorderContainer id="titCon" borderAlpha="0.7" y="5"  cornerRadius="10" height="56" maxWidth="300" >
				<s:HGroup  id="siteBar" width="100%"  paddingBottom="10" paddingLeft="10" paddingRight="10" paddingTop="10" verticalAlign="middle" >
					<mx:Image source="assets/tower.png" width="32" height="32" />
					<s:Label text="{site.siteName}" id="siteName" toolTip="站点名称" />
				</s:HGroup>
			</s:BorderContainer>
			<s:BorderContainer id="cableGroup" x="10"  y="0" borderVisible="false" backgroundAlpha="0" >
			</s:BorderContainer>
		</s:BorderContainer>
	</s:BorderContainer>
</s:Group>
