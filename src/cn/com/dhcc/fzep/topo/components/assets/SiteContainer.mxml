<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009"
		 xmlns:s="library://ns.adobe.com/flex/spark"
		 xmlns:mx="library://ns.adobe.com/flex/mx"
		 xmlns:services="services.*"
		 width="100%" height="100%" minWidth="300" minHeight="300">
	<fx:Declarations>
		<s:CallResponder id="siteInfoResult" result="siteInfoResult_resultHandler(event)"/>
		<services:AssetsRelation id="assetsRelation"
								 fault="Alert.show(event.fault.faultString + '\n' + event.fault.faultDetail)"
								 showBusyCursor="true"/>
		<s:CallResponder id="getEquipmentListBySiteIdResult" result="getEquipmentListBySiteIdResult_resultHandler(event)" />
		<services:SiteEquip id="siteEquip"
							fault="Alert.show(event.fault.faultString + '\n' + event.fault.faultDetail)"
							showBusyCursor="true"/>
		<s:CallResponder id="listCableVOResult" result="listCableVOResult_resultHandler(event)"/>
		<!-- 将非可视元素（例如服务、值对象）放在此处 -->
		
	</fx:Declarations>
	<fx:Script>
		<![CDATA[
			import com.adobe.serialization.json.JSON;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.core.UIComponent;
			import mx.graphics.SolidColorStroke;
			import mx.rpc.events.ResultEvent;
			import mx.utils.ObjectUtil;
			
			import spark.components.Group;
			import spark.components.VGroup;
			import spark.primitives.Line;
			
			import cn.com.dhcc.fzep.topo.common.EquipConstants;
			import cn.com.dhcc.fzep.topo.components.CarrierComponent;
			import cn.com.dhcc.fzep.topo.components.GPRSComponent;
			import cn.com.dhcc.fzep.topo.components.OLTComponent;
			import cn.com.dhcc.fzep.topo.components.ONUComponent;
			import cn.com.dhcc.fzep.topo.components.ThreeLayerSwitchComponent;
			import cn.com.dhcc.fzep.topo.components.TwoLayerSwitchComponent;
			import cn.com.dhcc.fzep.topo.components.UnknownComponent;
			
			import valueObjects.Cable;
			import valueObjects.CableVO;
			import valueObjects.Carrier;
			import valueObjects.FiberCoreNumber;
			import valueObjects.GPRS;
			import valueObjects.OLT;
			import valueObjects.ONU;
			import valueObjects.Site;
			import valueObjects.ThreeLayerSwitch;
			import valueObjects.TwoLayerSwitch;
			[Embed(source="assets/buttons/btn_square_32.png")]
			public var interImg:Class;
			
			
			
			[Bindable]
			private var _siteId:String;    //站点ID
			[Bindable]
			private var _site2Id:String;    //站点ID
			
			public function initSite(siteId:String, connectedSiteId:String, callBack:Function):void{
				_siteId = siteId;
				_site2Id = connectedSiteId;
				endCallback = callBack;
				siteInfo(_siteId);
			}
			public  function get siteId():String{
				return _siteId;
			}
			public  function get site2Id():String{
				return _site2Id;
			}
			[Bindable]
			public var site:Site;
			
			
			[Embed(source="assets/tag_green_16.png")]
			public var tagsImg:Class;
			private var _equipList:Array = new Array();
			
			private var _cableList:Array = new Array();

			
			private var sprite:Sprite;
			private var uic:UIComponent;
			
			public function get equipNumber():int{
				return _equipList.lenght;
			}
			private var TAG_WIDTH:Number = 7;    //连接点长宽度
			/**
			 * 设置设备view对象数组
			 */
			[ArrayElementType("valueObjects.EquipmentVO")]
			private function set equipList(equipList:Array):void{
				_equipList = equipList;
				var cableEquipList:Array = new Array();
				for (var i:int = 0; i < _equipList.length; i++) 
				{
					/*
					var equip:Object =  _equipList[i];
					var hGroup:HGroup = new HGroup();
					hGroup.height = TAG_WIDTH;
					hGroup.id = equip['type'] + equip['id'];
					hGroup.verticalAlign = "middle";
					hGroup.y = i*60;
					var equipComponent:UIComponent = getEquipComponent(equip);
					if(equipComponent){
						hGroup.addElement(equipComponent);
					}
					equipContainer.addElement(hGroup);
					*/
					var equip:Object =  _equipList[i];
					if(equip['type'] == EquipConstants.EQUIP_TYPE_Cable){    //光缆
						//cableEquipList.push(getCableObj(equip));
						continue;
					}
					var equipComponent:UIComponent = getEquipComponent(equip);
					var assetsEquip:AssetsEquipment = new AssetsEquipment();
					assetsEquip.y = i*assetsEquip.componentHeight;
					assetsEquip.id = equip['type'] + equip['id'];
					if(equipComponent){
						assetsEquip.equipment = equipComponent;
					}
					equipContainer.addElement(assetsEquip);
				}
				listCableVO(siteId,site2Id);
			}
			/**
			 * 得到设备显示组件
			 */
			private function getEquipComponent(equip:Object):UIComponent{
				var eType:String = equip['type'];
				var eName:String =  equip['name'];
				if(eType==EquipConstants.EQUIP_TYPE_GPRS){
					var gprsComponet:GPRSComponent = new GPRSComponent();
					var gprs:GPRS = new GPRS();
					gprs.gprsName = eName;
					gprsComponet.gprs = gprs;
					return gprsComponet;
				}else if(eType==EquipConstants.EQUIP_TYPE_ThreeLayerSwitch){
					var l3Layer:ThreeLayerSwitchComponent = new ThreeLayerSwitchComponent();
					var l3Switch:ThreeLayerSwitch = new ThreeLayerSwitch();
					l3Switch.switchName = eName;
					l3Layer.l3switch = l3Switch;
					return l3Layer;
				}else if(eType==EquipConstants.EQUIP_TYPE_Carrier){
					var carrierCom:CarrierComponent = new CarrierComponent();
					var carrier:Carrier = new Carrier();
					carrier.carrierName = eName;
					carrierCom.carrier = carrier;
					return carrierCom;
				}else if(eType==EquipConstants.EQUIP_TYPE_OLT){
					var oltCom:OLTComponent = new OLTComponent();
					var olt:OLT = new OLT();
					olt.oltName = eName;
					oltCom.olt = olt;
					return oltCom;
				}else if(eType==EquipConstants.EQUIP_TYPE_TwoLayerSwitch){
					var l2Layer:TwoLayerSwitchComponent = new TwoLayerSwitchComponent();
					var l2Switch:TwoLayerSwitch = new TwoLayerSwitch();
					l2Switch.switchName = eName;
					l2Layer.l2switch = l2Switch;
					return l2Layer;
				}else if(eType==EquipConstants.EQUIP_TYPE_ONU){
					var onuCom:ONUComponent = new ONUComponent();
					var onu:ONU = new ONU();
					onu.onuName = eName;
					onuCom.onu = onu;
					return onuCom;
				}else{
					return new UnknownComponent();
				}
			}
			private var CABLE_IN_WIDTH:Number = 10;    //光缆连接点长宽度
			private var CABLE_WEIGHT:Number = 3;    //光缆宽度
			/**
			 * 设置光缆列表
			 */
			[ArrayElementType("valueObjects.CableVO")]
			public function set cableList(cabList:Array):void{
				_cableList = cabList;
				var fcna:Array = new Array();
				for (var i:int = 0; i < _cableList.length; i++) 
				{
					if(i>1){
						break;
					}
					var vGroup:VGroup = new VGroup();
					//var cable:Object = _cableList[i];
					var cableVO:CableVO = _cableList[i] as CableVO;
					/*
					var label:Label = new Label();
					label.text = cable['cableName'];
					label.setStyle("color",lineColors[i%lineColors.length]);
					label.setStyle("fontSize",10);
					vGroup.addElement(label);
					*/
					var img:Image = new Image();
					img.width = CABLE_IN_WIDTH;
					img.height = CABLE_IN_WIDTH;
					img.source = tagsImg;
					img.toolTip = cableVO.cableName;//cable['cableName'];
					vGroup.addElement(img);
					vGroup.horizontalAlign = "center";
					vGroup.id = CABLE_INTERFACE_ID_TAG + cableVO.cableId;//cable['cableId'];
					vGroup.x = i*relationContainer.width+CABLE_WEIGHT/2;
					vGroup.width = 30;
					vGroup.y = i==0?0:SContainer.height;
					
					cableGroup.addElement(vGroup);
					/*
					var cableInfo:Label = new Label();
					cableInfo.text = cable['cableName'];
					cableInfo.x = cableGroup.x + vGroup.x;
					cableInfo.y = relationContainer.height;
					relationContainer.addElement(cableInfo);
					*/
					var line:Line = new Line();
					line.xFrom = cableGroup.x + vGroup.x;//(i+1)*CABLE_IN_WIDTH;
					line.yFrom = i*10;
					line.xTo =  cableGroup.x +  vGroup.x;//(i+1)*CABLE_IN_WIDTH;
					//line.yTo = relationContainer.height+(i-1)*10;
					if(i==0){
						line.yTo = relationContainer.height-10;
					}else if(i==1){
						line.yTo = relationContainer.height;
					}
					
					line.id = ObjectUtil.getClassInfo(Cable).name + cableVO.cableId;
					
					var stroke:SolidColorStroke = new SolidColorStroke();
					stroke.weight = CABLE_WEIGHT;
					stroke.caps = CapsStyle.ROUND;
					stroke.color = lineColors[i%lineColors.length];
					
					
					var delFlg:String = cableVO.delFlg;//cable['delFlg'];
					if(delFlg!=EquipConstants.EQUIP_DEL_FLAG_USED){
						stroke.alpha = 0.1;
					}
					
					line.stroke = stroke;
					
					relationContainer.addElement(line);
					
					for each (var j:FiberCoreNumber in cableVO.listFibeCoreNumber) 
					{
						fcna.push(j);
					}
					
					
				}
				fiberCoreNumberArray = fcna;
				//listFCN(siteId);
			}
			public function get cableList():Array{
				return _cableList;
			}
			private var CABLE_INTERFACE_ID_TAG:String = "_CableConnectorInterface_";
			[Bindable]
			private var _connJsonData:String;
			
			[ArrayElementType("valueObjects.FiberCoreNumber")]
			private var _fiberCoreNumberArray:Array;
			
			[ArrayElementType("valueObjects.FiberCoreNumber")]
			protected function set fiberCoreNumberArray(array:Array):void{
				_fiberCoreNumberArray = array;
				connectCableAndEquip();
			}
			private function connectCableAndEquip():void{
				var arrCol:ArrayCollection = new ArrayCollection(_fiberCoreNumberArray);  
				var cableX:Number = -1;
				for (var i:int = 0; i < arrCol.length; i++) 
				{
					var fiberCoreNumber:FiberCoreNumber = arrCol.getItemAt(i) as FiberCoreNumber;
					var cableId:String = fiberCoreNumber.cableId;
					/*
					 * {'deviceId':'1','deviceType':'gprs','deviceName':'safsdfa'}
					 */
					
					var connections:String = "";//fiberCoreNumber.connections.replace(/'/g,"\"") ;//'{"deviceId":"1","deviceType":"gprs","deviceName":"safsdfa"}';//
					if( fiberCoreNumber.startConnections!=null){
						connections = fiberCoreNumber.startConnections.replace(/'/g,"\"") ;
					}else if( fiberCoreNumber.endConnections != null){
						connections = fiberCoreNumber.endConnections.replace(/'/g,"\"") ;
					}
					//Alert.show(connections);
					var connectionObj:Object = JSON.decode(connections) as Object;
					var deviceId:String = connectionObj['deviceId'];
					var deviceType:String = equipType(connectionObj['deviceType']);
					//Alert.show(connectionObj['deviceType'] + "==>" + deviceType);
					var cableComName:String = ObjectUtil.getClassInfo(Cable).name + cableId;
					var cableStroke:SolidColorStroke = null;
					/*
					 * 定位对应光缆
					 */
					for (var j:int = 0; j < relationContainer.numElements; j++) 
					{
						var ele:Object = relationContainer.getElementAt(j);
						if(ele.id == cableComName){
							var cableLine:Line = ele as Line;
							cableX = cableLine.xFrom;
							cableStroke = cableLine.stroke as SolidColorStroke;
							//cableColor = cableStroke.color;
							break;
						}
						
					}
					
					if(cableX>-1){
						var cablePoint:Point = new Point();
						cablePoint.x = cableX;
						/*
						 * 查找设备 并和光缆连接
						 */
						for (var k:int = 0; k < equipContainer.numElements; k++) 
						{
							//var eles:HGroup = equipContainer.getElementAt(k) as HGroup;
							
							var assetsEquip:AssetsEquipment = equipContainer.getElementAt(k) as AssetsEquipment;
							
							var isTargetEquip:Boolean = false;
							isTargetEquip = (assetsEquip.id== (deviceType+deviceId));
							
							//Alert.show(assetsEquip.id + "  "  + deviceType+deviceId);
							if(isTargetEquip){
								var connectPoint:Point = null;
								connectPoint = assetsEquip.connectPoint(cablePoint);//assetsEquip.connectLeftPoint();
								var targetX:Number = equipContainer.x + assetsEquip.x +  connectPoint.x + (targetX>cableX?0:7);
								/*
								if(cableX>targetX) {
									connectPoint = assetsEquip.connectRightPoint();
									targetX = equipContainer.x + assetsEquip.x +  connectPoint.x ;
								}
								*/
								var targetY:Number = equipContainer.y + assetsEquip.y +  connectPoint.y ;
								var line:Line = new Line();
								line.xFrom = cableX;
								line.yFrom = targetY;
								line.xTo = targetX;
								line.yTo = targetY;
								
								var strokes:SolidColorStroke = new SolidColorStroke();
								strokes.weight = cableStroke.weight-2;
								strokes.caps=CapsStyle.ROUND;
								strokes.color = cableStroke.color;
								strokes.alpha = cableStroke.alpha;
								line.stroke =  strokes;
								
								var label:Label = new Label();
								label.text = fiberCoreNumber.fiberCoreNumberName;
								label.toolTip = "纤芯编号:" + fiberCoreNumber.fiberCoreNumberName;
								label.setStyle("color", cableStroke.color);
								
								var fiNumSize:uint = 11;    //编号字体大小
								label.setStyle("fontSize",fiNumSize);
								relationContainer.addElement(label);
								label.x = line.xTo+(targetX>cableX?-2:1.5)*fiNumSize*2;
								label.y = line.yTo-fiNumSize*1.1;
								
								relationContainer.addElement(line);
								break;
							}else{}
						}
						
					}
				}
				endCallback();
				
			}
			/**
			 * 将连接情况里的设备类型转换为 对象VO中的设备类型字符串 
			 * 来将设备区分开
			 */
			private function equipType(type:String):String{
				var mapstr:String = '';
				if(type==EquipConstants.TYPE_CONNECTION_GPRS){
					mapstr = EquipConstants.EQUIP_TYPE_GPRS;
				}else if(type==EquipConstants.TYPE_CONNECTION_OLT){
					mapstr = EquipConstants.EQUIP_TYPE_OLT
				}else if(type==EquipConstants.TYPE_CONNECTION_ONU){
					mapstr = EquipConstants.EQUIP_TYPE_ONU;
				}else if(type==EquipConstants.TYPE_CONNECTION_CARRIER){
					mapstr = EquipConstants.EQUIP_TYPE_Carrier;
				}else if(type==EquipConstants.TYPE_CONNECTION_THREELAYERSWITCH){
					mapstr = EquipConstants.EQUIP_TYPE_ThreeLayerSwitch;
				}else if(type==EquipConstants.TYPE_CONNECTION_TWOLAYERSWITCH){
					mapstr = EquipConstants.EQUIP_TYPE_TwoLayerSwitch;
				}
				return mapstr;
			}
			
			//光缆颜色
			[ArrayElementType("uint")]
			private var lineColors:Array =  new Array(0x5ca1d7,0x9dd6f4,0x725746, 0xff9f64);
			/**
			 * 连接到光缆 返回出口坐标信息
			 */
			public function connectionToCable(targetCableId:String):Point{
				for (var i:int = 0; i < cableGroup.numElements; i++) 
				{
					var cable:VGroup = cableGroup.getElementAt(i) as VGroup;
					var gName:String = cable.id;
					var cablesId:String = gName.split(CABLE_INTERFACE_ID_TAG)[1];
					if(cablesId == targetCableId){
						
						var pos:Point = new Point();
						pos.x = cableGroup.x + cable.width/2 + cable.x;
						pos.y = cableGroup.y  + cable.y;
						//Alert.show(cable.height+'');
						/*
						var xInSiteCon:Number = cable.width/2 + cable.x;
						var yInSiteCon:Number = cable.y;
						var line:Line = new Line();
						line.xFrom = pos.x;
						line.yFrom = yInSiteCon;
						line.xTo =  pos.x ;
						line.yTo = pos.y;
						var strokes:SolidColorStroke = new SolidColorStroke();
						strokes.weight = 3;
						strokes.caps=CapsStyle.ROUND;
						strokes.color = 0x3A9966;
						line.stroke = strokes;
						SContainer.addElement(line);
						*/
						return pos;
					}else{
						continue;
					}
				}
				return null;
			}
			
			
			
			protected function siteInfo(arg0:String):void
			{
				siteInfoResult.token = assetsRelation.siteInfo(arg0);
			}
			
			protected function siteInfoResult_resultHandler(event:ResultEvent):void
			{
				var rsite:Site = event.result as Site;
				site = rsite;
				getEquipmentListBySiteId(site.siteId);
				
			}
			
			protected function getEquipmentListBySiteId(arg0:String):void
			{
				getEquipmentListBySiteIdResult.token = siteEquip.getEquipmentListBySiteId(arg0);
			}
			
			protected function getEquipmentListBySiteIdResult_resultHandler(event:ResultEvent):void
			{
				var arrCol:ArrayCollection = event.result as ArrayCollection;
				equipList = arrCol.source;
			}
			
			protected function getCableObj(obj:Object):Cable{
				var jsonObj:Object = JSON.decode(obj['jsonData']);
				var cable:Cable = new Cable();
				cable.cableId = jsonObj['cableId'];
				cable.cableName = jsonObj['cableName'];
				cable.cableStartId = jsonObj['cableStartId'];
				cable.cableEndId = jsonObj['cableEndId'];
				cable.cableType = jsonObj['cableType'];
				cable.cableLength = jsonObj['cableLength'];
				cable.fiberId = jsonObj['fiberId'];
				cable.layingType = jsonObj['layingType'];
				cable.runTime = jsonObj['runTime'];
				cable.constructionUnitId = jsonObj['constructionUnitId'];
				cable.delFlg = jsonObj['delFlg'];
				cable.descp = jsonObj['descp'];
				cable.bizType = jsonObj['bizType'];
				cable.isMainRoad = jsonObj['isMainRoad'];
				return cable;
			}
			
			[Bindable]
			public var endCallback:Function;
			
			public function cableStroke(cableId:String):SolidColorStroke{
				
				var cableComName:String = ObjectUtil.getClassInfo(Cable).name + cableId;
				var cableStroke:SolidColorStroke = null;
				/*
				* 定位对应光缆
				*/
				for (var j:int = 0; j < relationContainer.numElements; j++) 
				{
					var ele:Object = relationContainer.getElementAt(j);
					if(ele.id == cableComName){
						var cableLine:Line = ele as Line;
						cableStroke = cableLine.stroke as SolidColorStroke;
						//cableColor = cableStroke.color;
						break;
					}else{continue;}
				}
				return cableStroke;
			}
			
			
			protected function listCableVO(arg0:String, arg1:String):void
			{
				listCableVOResult.token = assetsRelation.listCableVO(arg0, arg1);
			}
			
			protected function listCableVOResult_resultHandler(event:ResultEvent):void
			{
				var cableEquipList:ArrayCollection = event.result as ArrayCollection;
				//设置站点光缆集合
				cableList = cableEquipList.source;
			}
			
		]]>
	</fx:Script>
	<s:BorderContainer height="100%" width="100%" borderVisible="false"  >
		<s:layout>
			<s:VerticalLayout />
		</s:layout>
		<s:BorderContainer id="SContainer" height="100%" width="100%" borderVisible="false"  cornerRadius="10" >
			<s:BorderContainer id="relationContainer" x="15" y="{(titCon.height + titCon.y)/2}" height="100%" 
							   width="100%" borderAlpha="0.5" cornerRadius="10" borderVisible="true">
				<s:BorderContainer x="{SContainer.width/2-equipContainer.width/2}" y="30" id="equipContainer"  height="100%" borderAlpha="0"  cornerRadius="10"  borderVisible="false" >
				</s:BorderContainer>
			</s:BorderContainer>
			<s:BorderContainer id="titCon" borderAlpha="0.7" y="5"  cornerRadius="10" height="56" maxWidth="300" >
				<s:HGroup  id="siteBar" width="100%"  paddingBottom="10" paddingLeft="10" paddingRight="10" paddingTop="10" verticalAlign="middle" >
					<mx:Image source="assets/tower.png" width="32" height="32" />
					<s:Label text="{site.siteName}" id="siteName" toolTip="站点名称" />
				</s:HGroup>
			</s:BorderContainer>
			<s:BorderContainer id="cableGroup" x="10"  y="0" borderVisible="false" backgroundAlpha="0" >
			</s:BorderContainer>
		</s:BorderContainer>
	</s:BorderContainer>
</s:Group>
