<?xml version="1.0" encoding="utf-8"?>
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009"
			   xmlns:s="library://ns.adobe.com/flex/spark"
			   xmlns:mx="library://ns.adobe.com/flex/mx"
			   xmlns:xtreme="xtreme.core.*"
			   xmlns:services="services.*"  minWidth="955" minHeight="600" 
			   xmlns:cedomaps="cn.com.dhcc.fzep.topo.maps.*"
			   width="100%"  applicationComplete="applicationComplete()" >
	<fx:Declarations>
		<s:TitleWindow id="showInfoWin" width="280" title="详细信息" close="showInfoWin_closeHandler(event)" >
			<mx:DataGrid id="headerShowInfo" showHeaders="false" width="30%"  
						 borderVisible="false" textAlign="right">
				<mx:dataProvider>
					<fx:Object name="名        称" />
					<fx:Object name="地        址" />
					<fx:Object name="负  责  人" />
					<fx:Object name="联系电话" />
					<fx:Object name="备        注" />
				</mx:dataProvider>
				<mx:columns >
					<mx:DataGridColumn dataField="name" fontWeight="normal" />
				</mx:columns>
			</mx:DataGrid>
			<mx:DataGrid id="equipInfoGrid" x="{headerShowInfo.width}" showHeaders="false" width="75%"
						 borderVisible="false">
				<mx:columns>
					<mx:DataGridColumn dataField="name" wordWrap="true" />
				</mx:columns>
			</mx:DataGrid>
		</s:TitleWindow>
		<s:TitleWindow id="showCableWin" width="400" title="详细信息" close="showInfoWin_closeHandler(event)" >
			<mx:DataGrid id="headerShowCable" showHeaders="false" width="30%" 
						 borderVisible="false" textAlign="right" rowCount="11" >
				<mx:dataProvider>
					<fx:Object name="光缆名称" />
					<fx:Object name="光缆起点" />
					<fx:Object name="光缆终点" />
					<fx:Object name="施工单位" />
					<fx:Object name="光缆类型" />
					<fx:Object name="光缆长度" />
					<fx:Object name="纤芯数量" />
					<fx:Object name="是否主干网" />
					<fx:Object name="敷设类型" />
					<fx:Object name="投运时间" />
					<fx:Object name="备        注" />
				</mx:dataProvider>
				<mx:columns >
					<mx:DataGridColumn dataField="name" fontWeight="normal" />
				</mx:columns>
			</mx:DataGrid>
			<mx:DataGrid id="showCableGrid" x="{headerShowCable.width}" showHeaders="false" width="75%"
						 borderVisible="false"  rowCount="11">
				<mx:columns>
					<mx:DataGridColumn dataField="name" wordWrap="true" />
				</mx:columns>
			</mx:DataGrid>
		</s:TitleWindow>
		<s:CallResponder id="getListByAreaResult"/>
		<services:SiteSchema id="siteSchema"
							 fault="Alert.show(event.fault.faultString + '\n' + event.fault.faultDetail)"
							 showBusyCursor="true"/>
		<services:ShowSchema id="showSchema"
							 fault="Alert.show(event.fault.faultString + '\n' + event.fault.faultDetail)"
							 showBusyCursor="true"/>
		<s:CallResponder id="getListByConditionResult"/>
		<s:CallResponder id="getPageResult" result="getPageResult_resultHandler(event)"/>
		<s:CallResponder id="getSiteRelationBySiteNameResult" result="getSiteRelationBySiteNameResult_resultHandler(event)"
						 fault="getSiteRelationBySiteNameResult_faultHandler(event)"/>
		<s:CallResponder id="getSiteInfoByIdResult"  result="getSiteInfoByIdResult_resultHandler(event)"/>
		<services:SiteEquip id="siteEquip"
							fault="Alert.show(event.fault.faultString + '\n' + event.fault.faultDetail)"
							showBusyCursor="false"/>
		<s:CallResponder id="getCableVOByIdResult" result="getCableVOByIdResult_resultHandler(event)"/>
		<services:Equip id="equip"
						fault="Alert.show(event.fault.faultString + '\n' + event.fault.faultDetail)"
						showBusyCursor="true"/>
		<s:CallResponder id="getCableByIdResult" result="getCableByIdResult_resultHandler(event)"/>
		<s:CallResponder id="getSiteInfoByIdResult2" result="getSiteInfoByIdResult2_resultHandler(event)"/>
		<s:CallResponder id="getDefaultSchemaResult"  result="getSchemaResult_resultHandler(event)"/>
		<s:CallResponder id="getSchemaVOByAreaNameResult" result="getSchemaResult_resultHandler(event)" fault="getSchemaVOByAreaNameResult_faultHandler(event)" />
		<s:CallResponder id="getAllAreaResult" result="getAllAreaResult_resultHandler(event)"/>
		<services:AreaSchema id="areaSchema"
							 fault="Alert.show(event.fault.faultString + '\n' + event.fault.faultDetail)"
							 showBusyCursor="true"/>
		<!-- 将非可视元素（例如服务、值对象）放在此处 -->
	</fx:Declarations>
	<fx:Script>
		<![CDATA[
			import com.degrafa.GeometryGroup;
			
			import flash.ux.utils.MathUtil;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.controls.Image;
			import mx.core.IUIComponent;
			import mx.events.CloseEvent;
			import mx.events.DragEvent;
			import mx.events.FlexEvent;
			import mx.managers.DragManager;
			import mx.managers.PopUpManager;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			import mx.utils.ObjectUtil;
			
			import spark.events.IndexChangeEvent;
			
			import cn.com.dhcc.fzep.topo.common.EquipConstants;
			import cn.com.dhcc.fzep.topo.components.SchemaElementComponent;
			import cn.com.dhcc.fzep.topo.components.SiteComponent;
			import cn.com.dhcc.fzep.topo.poao.SchemaElementsInfo;
			import cn.com.dhcc.fzep.topo.utils.ScriptUtils;
			import cn.com.dhcc.fzep.topo.utils.TopoUtils;
			
			import valueObjects.Area;
			import valueObjects.Cable;
			import valueObjects.Page;
			import valueObjects.SchemaVO;
			import valueObjects.SearchSite;
			import valueObjects.Site;
			import valueObjects.SiteRelation;
			
			import xtreme.core.Root;
			import xtreme.scene.SceneManager;
			import xtreme.scene.entity.Entity;
			import xtreme.scene.entity.shapes.DynamicConnector;
			import xtreme.scene.entity.shapes.FlexComponent;
			
			[Bindable]
			public var g_areaName:String;    //区域名称
			protected var siteContextMenu:ContextMenu = new ContextMenu();    //站点 右键 菜单
			protected var cableContextMenu:ContextMenu = new ContextMenu();    //站点 右键 菜单
			private function applicationComplete() : void
			{
				stage.align = StageAlign.TOP_LEFT;
				stage.scaleMode = StageScaleMode.NO_SCALE;
				stage.quality = StageQuality.HIGH;
				this.contextMenu.hideBuiltInItems();
				/**
				var console:Console = Console.instance;
				if (console == null)
					console = new Console(stage);
				view.getRoot().layerManager.enableContextMenu();
				view.registerBuildInCommand(console);
				 * */
				view.getRoot().navigationView.visible = false;
				/**
				 * 设置默认分页搜索参数
				 */
				page.curPage = 1;
				page.numPerPage = 6;
				g_SearchSiteCondition.page = page;
				g_SearchSiteCondition.areaName = g_areaName;
				g_areaName =  fzoutline.defaultAreaName;
				/*
				schemaNameLabel.text = "【" + searchSiteCondition.areaName + "】";
				getSchemaByAreaName(areaName);
				*/
				getDefaultSchema();
				
				var gotoGIS:ContextMenuItem = new ContextMenuItem("跳转到科大GIS", false); 
				//gotoGIS.addEventListener(ContextMenuEvent.MENU_ITEM_SELECT, goRelationWithResource);
				/**
				 * 站点右键菜单
				 */
				siteContextMenu.hideBuiltInItems(); 
				var searchSiteRelation:ContextMenuItem = new ContextMenuItem("搜索站点关系", true); 
				searchSiteRelation.addEventListener(ContextMenuEvent.MENU_ITEM_SELECT, function(evt:ContextMenuEvent):void{
					var sceneManager:SceneManager = Root.instance.sceneManager;
					var entity:Entity = sceneManager.getEntity(evt.contextMenuOwner.name);
					if(entity is FlexComponent){
						var flexComponent:FlexComponent = entity as FlexComponent;
						var siteName:String = getSiteName(flexComponent);
						if(siteName.match(/.{1,15}/)){
							searchRelationKey.text = siteName;
							searchSiteSchema();
						}
					}else{
						Alert.show(String(evt.contextMenuOwner)+"错误的位置调用","异常");
					}
				});
				siteContextMenu.customItems.push(searchSiteRelation); 
				
				var detail:ContextMenuItem = new ContextMenuItem("站点基础信息", false); 
				detail.addEventListener(ContextMenuEvent.MENU_ITEM_SELECT, function(evt:ContextMenuEvent):void{
					var sceneManager:SceneManager = Root.instance.sceneManager;
					var entity:Entity = sceneManager.getEntity(evt.contextMenuOwner.name);
					if(entity is FlexComponent){
						var flexComponent:FlexComponent = entity as FlexComponent;
						var siteId:String = getSiteId(flexComponent);
						getSiteInfoById(siteId); 
					}else{
						Alert.show("错误的位置调用","异常");
					}
				});
				siteContextMenu.customItems.push(detail); 
				
				//siteContextMenu.customItems.push(gotoGIS); 
				/**
				 * 光缆右键菜单
				 */
				cableContextMenu.hideBuiltInItems(); 
				
				var cableDetail:ContextMenuItem = new ContextMenuItem("光缆信息", false); 
				cableDetail.addEventListener(ContextMenuEvent.MENU_ITEM_SELECT, function(event:ContextMenuEvent):void{
					var sceneManager:SceneManager = Root.instance.sceneManager;
					var entity:Entity = sceneManager.getEntity(event.contextMenuOwner.name);
					if(entity is DynamicConnector){
						var connector:DynamicConnector = entity as DynamicConnector;
						var cable:Cable = connector.customData as Cable;
						getCableVOById(cable.cableId);
					}else{
						Alert.show('内部错误','错误');
					}
				});
				
				cableContextMenu.customItems.push(cableDetail); 
				var fiberDetail:ContextMenuItem = new ContextMenuItem("光纤信息", false); 
				fiberDetail.addEventListener(ContextMenuEvent.MENU_ITEM_SELECT, function(event:ContextMenuEvent):void{
					
					var sceneManager:SceneManager = Root.instance.sceneManager;
					var entity:Entity = sceneManager.getEntity(event.contextMenuOwner.name);
					if(entity is DynamicConnector){
						var connector:DynamicConnector = entity as DynamicConnector;
						var cable:Cable = connector.customData as Cable;
						var pageUrl:String = ScriptUtils.getRoot(root.loaderInfo.url) + 
												"zdy/a_fiberCoreNumber_forward.jsp?cableId=" + cable.cableId;;
						var pageName:String = "光缆详细信息";
						ScriptUtils.openTabWindow(pageUrl,pageName);
					}else{
						Alert.show('内部错误','错误');
					}
					
				});
				cableContextMenu.customItems.push(fiberDetail); 
				
				var relation:ContextMenuItem = new ContextMenuItem("资产关系图", false); 
				relation.addEventListener(ContextMenuEvent.MENU_ITEM_SELECT, function(event:ContextMenuEvent):void{
					var sceneManager:SceneManager = Root.instance.sceneManager;
					var entity:Entity = sceneManager.getEntity(event.contextMenuOwner.name);
					if(entity is DynamicConnector){
						var connector:DynamicConnector = entity as DynamicConnector;
						var cable:Cable = connector.customData as Cable;
						var topoBasePath:String = ScriptUtils.getRoot(root.loaderInfo.url) + "topo/";
						var url:String = topoBasePath + "assetsRelation.jsp?s1=" + cable.cableStartId + "&s2=" + cable.cableEndId;
						ScriptUtils.openTabWindow(url, "资产关系图");
					}
				});
				cableContextMenu.customItems.push(relation); 
				//cableContextMenu.customItems.push(gotoGIS); 
			}
			/**
			 * 关闭信息展示弹出窗口
			 */
			protected function showInfoWin_closeHandler(event:CloseEvent):void { 
				PopUpManager.removePopUp(showInfoWin);   
				PopUpManager.removePopUp(showCableWin);   
			}   
			/**
			 * <b>工具:</b><br />
			 * 得到对应站点的ID 
			 */
			private function getSiteId(flexComponent:FlexComponent):String{
				if(flexComponent.component is SchemaElementComponent){
					var eleCom:SchemaElementComponent = flexComponent.component as SchemaElementComponent;
					var eleInfo:SchemaElementsInfo = eleCom.eleInfo;
					return eleInfo.id;
				}else if ( flexComponent.component is SiteComponent ){
					var siteCom:SiteComponent = flexComponent.component as SiteComponent;
					var site:Site = siteCom.site;
					return site.siteId;
				}
				return null;
			}
			/**
			 * <b>工具:</b><br />
			 * 得到对应站点的名称 
			 */
			private function getSiteName(flexComponent:FlexComponent):String{
				if(flexComponent.component is SchemaElementComponent){
					var eleCom:SchemaElementComponent = flexComponent.component as SchemaElementComponent;
					var eleInfo:SchemaElementsInfo = eleCom.eleInfo;
					return eleInfo.showName;
				}else if ( flexComponent.component is SiteComponent ){
					var siteCom:SiteComponent = flexComponent.component as SiteComponent;
					var site:Site = siteCom.site;
					return site.siteName;
				}
				return null;
			}
			
			protected function getSchemaResult_resultHandler(event:ResultEvent):void
			{
				var schema:SchemaVO = event.result  as SchemaVO;
				if(schema){
					schemaNameLabel.text = schema.schemaName;
					schemaNote.text = schema.schemaNote;
					TopoUtils.loadSchema(Root.instance.sceneManager, schema.schemaData,siteContextMenu, cableContextMenu, siteComponent_doubleClickHandler);
					
					g_SearchSiteCondition.areaId = int(schema.areaId);
					g_areaName =  schema.areaName;
					getListByCondition(g_SearchSiteCondition);
					
					loadSchemaAddInfo();
				}else{
					schemaNameLabel.text = '视图未创建';
					schemaNote.text = '';
					Alert.okLabel = "知道了";
					Root.instance.sceneManager.clearScene();
					Alert.show("无该区域站点视图。\n请到视图管理页面添加。", "提示");
				}
				for (var i:int = 0; i < allArea.source.length; i++) 
				{
					var area:Area = allArea.source[i] as Area;
					if(area.areaName == g_areaName){
						areaComboBox.selectedIndex = i;
						break;
					}
				}
				
			}
			
			private var elementList:Array=new Array();
			/**
			 * 加载视图附加信息
			 */
			public function loadSchemaAddInfo():void{
				var sceneMgr:SceneManager = Root.instance.sceneManager;
				var entityList:Array = sceneMgr.entityList();
				for (var i:int = 0; i < entityList.length; i++) 
				{
					var entity:Entity = entityList[i] as Entity;
					elementList.push(entity);
				}
				nextElementAddInfo();
			}
			/**
			 * 依次加载设备附加信息
			 */
			private var g_LoadAddCounter:Number = 0;
			protected function nextElementAddInfo():void{
				if(g_LoadAddCounter<elementList.length){
					if(elementList[g_LoadAddCounter] is FlexComponent){
						//Alert.show(elementList[loadAddCounter].name);
						var siteId:String = elementList[g_LoadAddCounter].name.split(ObjectUtil.getClassInfo(Site).name)[1];
						getSiteInfoById2(siteId);
						g_LoadAddCounter++;
					}else if(elementList[g_LoadAddCounter] is DynamicConnector){
						var cableId:String = elementList[g_LoadAddCounter].name.split(ObjectUtil.getClassInfo(Cable).name)[1];
						getCableById(cableId);
						g_LoadAddCounter++;
					}
				}
			}
			protected function getCableById(arg0:String):void
			{
				getCableByIdResult.token = equip.getCableById(arg0);
			}
			
			protected function getCableByIdResult_resultHandler(event:ResultEvent):void
			{
				var sceneMgr:SceneManager = Root.instance.sceneManager;
				var cable:Cable = event.result as Cable;
				if(cable){
					var entity:Entity = sceneMgr.getEntity(ObjectUtil.getClassInfo(Cable).name+cable.cableId);
					var connector:DynamicConnector = entity as DynamicConnector;
					connector.lineThickness =  cable.isMainRoad==EquipConstants.CABLE_IS_MAIN?4:2;
					//connector.lineColor = 0xE53E38;
					if(cable.delFlg!=EquipConstants.EQUIP_DEL_FLAG_USED){
						connector.alpha = 0.1;
					}else{
						connector.alpha = 1;
					}
				}else{}
				//Alert.show(cable.cableName);
				if(g_LoadAddCounter<elementList.length){
					nextElementAddInfo();
				}else{
					g_LoadAddCounter=0;
					elementList=new Array();
				}
			}
			protected function getSiteInfoById2(arg0:String):void
			{
				getSiteInfoByIdResult2.token = siteEquip.getSiteInfoById(arg0);
			}
			
			protected function getSiteInfoByIdResult2_resultHandler(event:ResultEvent):void
			{
				var sceneMgr:SceneManager = Root.instance.sceneManager;
				var site:Site = event.result as Site;
				if(site){
					var entity:Entity = sceneMgr.getEntity(ObjectUtil.getClassInfo(Site).name+site.siteId);
					var siteCompoent:FlexComponent = entity as FlexComponent;
					var elementCom:SchemaElementComponent = siteCompoent.component as SchemaElementComponent;
					//Alert.show(site.siteName);
					if(site.delFlg==EquipConstants.EQUIP_DEL_FLAG_USED){
						elementCom.alpha = 1;
					}else{
						elementCom.alpha = 0.1;
						elementCom.toolTip =  site.siteName + "[ 已停用  ]";
					}
					siteCompoent.fillColor = 0xE53E38;
				}
				if(g_LoadAddCounter<elementList.length){
					nextElementAddInfo();
				}else{
					g_LoadAddCounter=0;
					elementList=new Array();
				}
			}
			
			
			protected function siteComponent_doubleClickHandler(event:MouseEvent):void
			{
				var siteId:String = null;
				if(event.currentTarget is SiteComponent){
					var siteCom:SiteComponent = event.currentTarget as SiteComponent;
					var site:Site = siteCom.site;
					siteId = site.siteId;
				}else if(event.currentTarget is SchemaElementComponent){
					var eleCom:SchemaElementComponent = event.currentTarget as SchemaElementComponent;
					var eleInfo:SchemaElementsInfo = eleCom.eleInfo;
					siteId = eleInfo.id;
				}
				if(siteId!=null){
					var topoBasePath:String = ScriptUtils.getRoot(root.loaderInfo.url) + "topo/";
					ScriptUtils.openTabWindow(topoBasePath + "siteEquipment.jsp?siteId="+siteId,"站点详细");
				}
			}
			/**
			 * 展示站点信息
			 */
			/*
			public function doShowEquipment(eleInfo:SchemaElementsInfo):void {
				var targetURL:String = ScriptUtils.getRoot(this.loaderInfo.url)
						+ "topo/siteEquipment.jsp?siteId=" + eleInfo.id;
				ScriptUtils.openTabWindow(targetURL,"");
			}
			*/
			protected function image1_mouseOverHandler(event:MouseEvent):void
			{
				var img:Image = event.currentTarget as Image;
				//img.opaqueBackground = "0xef23ed";
				img.alpha = 0.5;
			}
			
			protected function image1_mouseOutHandler(event:MouseEvent):void
			{
				var img:Image = event.currentTarget as Image;
				//img.opaqueBackground = null;
				img.alpha = 0.2;
			}
			
			protected function getListByArea(arg0:String):void
			{
				getListByAreaResult.token = siteSchema.getListByArea(arg0);
			}
			
			
			private function loadSchema2(event:MouseEvent):void{  
				var grup:GeometryGroup = event.currentTarget as GeometryGroup;
				//Alert.show(grup.name);
				
				schemaNameLabel.text = "【" + grup.name + "】";
				
				getSchemaVOByAreaName(grup.name);
				searchSite(grup.name);
			} 
			
			
			protected function getListByAreaNameResult_faultHandler(event:FaultEvent):void
			{
				Alert.show("获取站点信息失败", "提示");
			}
			
			protected function getListByAreaNameResult_resultHandler(event:ResultEvent):void
			{
				var data:Array = event.result as Array;
				//siteGridP.title = "区域站点(" + data.length + ")";
				
			}
			
			protected function searchKey_focusInHandler(event:FocusEvent):void
			{
				// TODO 自动补全 搜索  站点名称  关键字
				
			}
			
			protected function searchKey_keyDownHandler(event:KeyboardEvent):void
			{
				if(event.keyCode ==13){    //the 'enter' key code 
					searchSiteSchema();
				}
			}
			
			
			protected function searchBtn_clickHandler(event:MouseEvent):void
			{
				if(searchRelationKey.text.match(/.{1,15}/)){
					searchSiteSchema();
				}else {
					getSchemaVOByAreaName(g_areaName);
				}
			}
			/**
			 * 搜索并生成区域对应站点之间关系视图
			 */
			protected function searchSiteSchema():void {
				var keyReg:RegExp = /.{1,15}/;    //关键字格式正则表达式
				if(searchRelationKey.text.match(keyReg)){
					//Alert.show(searchKey.text,"搜索");
					var degree:int = 1;
					if(degreeOne.selected){
						degree = 1;
					}else if(degreeTwo.selected){
						degree = 2;
					}
					/*
					else if(degreeThree.selected){
						degree = 3;
					}
					*/
					/**
					 * 0-全部
					 * 1-主干
					 * 2-非主干
					 */
					/*
					var type:int = 1;
					if(allCable.selected){
						type = 1;
					}else if(isMain.selected){
						type = 2;
					}else if(notMain.selected){
						type = 3;
					}
					*/
					getSiteRelationBySiteName(searchRelationKey.text, degree);
				}else{
					//搜索关键字-参数错误
					Alert.show("搜索参数错误","错误");
				}
			}
			
			
			protected function getListByCondition(arg0:SearchSite):void
			{
				getPage(arg0);
				getListByConditionResult.token = siteSchema.getListByCondition(arg0);
			}
			
			[Bindable]
			public var g_SearchSiteCondition:SearchSite = new SearchSite();
			[Bindable]
			public var page:Page = new Page();
			/**
			 * 搜索区域对应站点
			 */
			protected function searchSite(areaName:String):void {
				g_SearchSiteCondition.areaName = areaName;
				g_SearchSiteCondition.page.curPage = 1;
				getListByCondition(g_SearchSiteCondition);
			}
			
			
			protected function getPage(arg0:SearchSite):void
			{
				getPageResult.token = siteSchema.getPage(arg0);
			}
			
			protected function getPageResult_resultHandler(event:ResultEvent):void
			{
				var rePage:Page = event.result as Page;
				g_SearchSiteCondition.page.totalPage = rePage.totalPage;
				g_SearchSiteCondition.page.curPage = rePage.curPage;
				g_SearchSiteCondition.page.totalRecords = rePage.totalRecords;
				pagedetail.text = "第" + g_SearchSiteCondition.page.curPage + "页/共" + g_SearchSiteCondition.page.totalPage + "页";
				inputpage.maximum = rePage.totalPage;
				siteTotalRecords.text = "共 " + g_SearchSiteCondition.page.totalRecords + " 个结果";
				if(rePage.curPage==1){
					prePage.enabled = false;
					firstPage.enabled = false;
				}else{
					prePage.enabled = true;
					firstPage.enabled = true;
				}
				if(rePage.curPage+1>rePage.totalPage){
					nextPage.enabled = false;
					lastPage.enabled = false;
				}else {
					nextPage.enabled = true;
					lastPage.enabled = true;
				}
			}
			
			protected function siteDataGrid_creationCompleteHandler(event:FlexEvent):void
			{
				getListByCondition(g_SearchSiteCondition);
			}
			/**
			 * 页面跳转
			 */
			protected function gotoPage(event:MouseEvent):void
			{
				if(event.currentTarget.id=="firstPage"){
					g_SearchSiteCondition.page.curPage = 1;
				}else if(event.currentTarget.id=="lastPage"){
					g_SearchSiteCondition.page.curPage = g_SearchSiteCondition.page.totalPage;
				}else if(event.currentTarget.id=="prePage"){
					if(g_SearchSiteCondition.page.curPage>1){
						g_SearchSiteCondition.page.curPage = g_SearchSiteCondition.page.curPage-1;
					}
				}else if(event.currentTarget.id=="nextPage"){
					if(g_SearchSiteCondition.page.curPage<g_SearchSiteCondition.page.totalPage){
						g_SearchSiteCondition.page.curPage = g_SearchSiteCondition.page.curPage+1;
					}
				}else if(event.currentTarget.id=="jumpTo"){
					if(inputpage.value<=g_SearchSiteCondition.page.totalPage && inputpage.value >0){
						g_SearchSiteCondition.page.curPage = inputpage.value;
					}
				}
				//Alert.show(searchSiteCondition.page.totalPage+'');
				//Alert.show(searchSiteCondition.page.curPage + "/" + searchSiteCondition.page.numPerPage);
				getListByCondition(g_SearchSiteCondition);
			}
			
			protected function searchSiteListKeyBtn_clickHandler(event:MouseEvent):void
			{
				g_SearchSiteCondition.keyWord = searchSiteListKey.text;
				if(g_SearchSiteCondition.keyWord.length>0){
					if(scope_sitename.selected){
						g_SearchSiteCondition.searchField = "siteName";
					}else if(scope_siteAddress.selected){
						g_SearchSiteCondition.searchField = "siteAdress";
					}else if(scope_contact.selected){
						g_SearchSiteCondition.searchField = "connactName";
					}
					g_SearchSiteCondition.page.curPage = 1;
					getListByCondition(g_SearchSiteCondition);
				}else{
					g_SearchSiteCondition.searchField = "";
					g_SearchSiteCondition.page.curPage = 1;
					getListByCondition(g_SearchSiteCondition);
					
				}
			}
			
			protected function searchSiteListAllBtn_clickHandler(event:MouseEvent):void
			{
				scope_sitename.selected = true;
				searchSiteListKey.text = "";
				g_SearchSiteCondition.searchField = "";
				g_SearchSiteCondition.page.curPage = 1;
				getListByCondition(g_SearchSiteCondition);
			}
			
			protected function searchSiteListKeyBtn_keyUpHandler(event:KeyboardEvent):void
			{
				if(event.keyCode ==13){    //the 'enter' key code 
					searchSiteListKeyBtn_clickHandler(null);
				}
			}
			
			
			protected function getSiteRelationBySiteName(arg0:String, arg1:int):void
			{
				getSiteRelationBySiteNameResult.token = siteSchema.getSiteRelationBySiteName(arg0, arg1);
			}
			[Embed(source="assets/location_16.png")]
			[Bindable]
			private var centerMarkerImg:Class;     //搜索地点标记
			private var centerMarker:Image;
			protected function getSiteRelationBySiteNameResult_resultHandler(event:ResultEvent):void
			{
				var siteRelation:SiteRelation = event.result as SiteRelation;
				var siteComponentPreStr:String = ObjectUtil.getClassInfo(Site).name;
				if(siteRelation.center){
					schemaNameLabel.text ="【" + searchRelationKey.text + "】站点关系图";
					Root.instance.sceneManager.clearScene();
					var sceneMgr:SceneManager = Root.instance.sceneManager;
					
					var siteComponent:SiteComponent = new SiteComponent();
					siteComponent.site = siteRelation.center;
					siteComponent.contextMenu = siteContextMenu;
					siteComponent.doubleClickEnabled = true;
					siteComponent.addEventListener(MouseEvent.DOUBLE_CLICK, siteComponent_doubleClickHandler);
					
					var comName:String = siteComponentPreStr + siteComponent.site.siteId;
					var center:FlexComponent = new FlexComponent(comName, siteComponent);
					center.width = 60;
					center.height = 60;
					center.x = view.width*0.45;
					center.y = view.height*0.45;
					center.draggable = false;
					center.editable = false;
					center.selectable = false;
					sceneMgr.addEntity(center);
					//搜索地点标记
					if(sceneMgr.existsEntity('centerMarker')){
						var centerComponent:FlexComponent = sceneMgr.getEntity("centerMarker") as FlexComponent;
						centerComponent.x = center.x + (center.width - centerMarker.width)/2;
						centerComponent.y = center.y - centerMarker.height ;
					}else {
						centerMarker =  new Image();
						centerMarker.source=centerMarkerImg;    //"@Embed(source='assets/location_16.png')";
						centerMarker.width = 18;
						centerMarker.height = 18;
						centerMarker.toolTip = "目标站点";
						//siteContainer.addElement(centerMarker);
						var centerMarkerComponent:FlexComponent = new FlexComponent("centerMarker", centerMarker);
						centerMarkerComponent.x = center.x + (center.width - centerMarker.width)/2;
						centerMarkerComponent.y = center.y - centerMarker.height ;
						centerMarkerComponent.editable = false;
						centerMarkerComponent.draggable = false;
						centerMarkerComponent.contextMenu = new ContextMenu();
						sceneMgr.addEntity(centerMarkerComponent);
					}
					
					/**
					 * 一层关系站点
					 */
					var radius:Number = 130;    //长度
					var angle:Number = 45;
					var leveOneList:ArrayCollection = siteRelation.levelOneSite;
					var intern:Number = 360/(leveOneList.length + 1);
					for (var i:int = 0; i < leveOneList.length; i++) 
					{
						var siteLevelOneComp:SiteComponent = new SiteComponent();
						siteLevelOneComp.site = leveOneList.getItemAt(i) as Site;
						var siteLeveOneName:String = siteComponentPreStr + siteLevelOneComp.site.siteId;
						if(!sceneMgr.existsEntity(siteLeveOneName)){
							siteLevelOneComp.contextMenu = siteContextMenu;
							siteLevelOneComp.doubleClickEnabled = true;
							siteLevelOneComp.alpha = siteLevelOneComp.site.delFlg=="启用"?1:0.1;
							siteLevelOneComp.addEventListener(MouseEvent.DOUBLE_CLICK, siteComponent_doubleClickHandler);
							var flexCom:FlexComponent = new FlexComponent(siteLeveOneName, siteLevelOneComp);
							flexCom.draggable = true;
							flexCom.editable = false;
							// 计算面板位置
							var rad:Number = angle * MathUtil.DEG_2_RAD;
							flexCom.x = center.x + Math.sin(rad) * radius;
							flexCom.y = center.y + Math.cos(rad) * radius;
							angle += intern;
							
							flexCom.alpha = 0.7;
							sceneMgr.addEntity(flexCom);
						}else{}
					}
					var leveTwoList:ArrayCollection = siteRelation.levelTwoSite;
					if(leveTwoList!=null){
						for (var k:int = 0; k < leveTwoList.length; k++) 
						{
							var siteLevelTwoComp:SiteComponent = new SiteComponent();
							siteLevelTwoComp.site = leveTwoList.getItemAt(k) as Site;
							var siteLevelTwoName:String = siteComponentPreStr + siteLevelTwoComp.site.siteId;
							if(!sceneMgr.existsEntity(siteLevelTwoName)){
								siteLevelTwoComp.doubleClickEnabled = true;
								siteLevelTwoComp.addEventListener(MouseEvent.DOUBLE_CLICK, siteComponent_doubleClickHandler);
								siteLevelTwoComp.contextMenu = siteContextMenu;
								siteLevelTwoComp.alpha = siteLevelTwoComp.site.delFlg==EquipConstants.EQUIP_DEL_FLAG_USED?1:0.1;
								var flexComTwo:FlexComponent = new FlexComponent(siteLevelTwoName, siteLevelTwoComp);
								flexComTwo.draggable = true;
								flexComTwo.editable = false;
								sceneMgr.addEntity(flexComTwo);
							}else{
								//do nothing
							}
						}
					}
					//光缆颜色
					var lineColors:Array =  new Array(0x725746,0x5ca1d7,0x9dd6f4, 0xff9f64);//光缆颜色 彩虹7色: [0xFF0000, 0xFF7F00, 0xFFFF00, 0x00FF00, 0x00009C, 0x0000FF, 0xDB70DB];
					
					var cableList:ArrayCollection = siteRelation.listCable;
					angle = 75;
					intern = 360/(cableList.length + 1);
					radius = 100;
					for (var j:int = 0; j < cableList.length; j++) 
					{
						var cableObj:Object = cableList.getItemAt(j);
						var startID:String = cableObj["cableStartId"];
						var endID:String = cableObj["cableEndId"];
						var startExisted:Boolean = sceneMgr.existsEntity(siteComponentPreStr + startID);
						var endExisted:Boolean = sceneMgr.existsEntity(siteComponentPreStr + startID);
						if(startExisted && endExisted){
							var startComponent:FlexComponent = sceneMgr.getEntity(siteComponentPreStr + startID) as FlexComponent;
							var endComponent:FlexComponent = sceneMgr.getEntity(siteComponentPreStr + endID) as FlexComponent;
							/**
							 * 计算位置
							 */
							rad = angle * MathUtil.DEG_2_RAD;
							if(startComponent.x==0 || startComponent.y == 0){
								startComponent.x = endComponent.x + Math.sin(rad) * radius;
								startComponent.y = endComponent.y + Math.cos(rad) * radius;
								angle += intern;
									
							}
							if(endComponent.x ==0 || endComponent.y == 0){
								endComponent.x = startComponent.x + Math.sin(rad) * radius;
								endComponent.y = startComponent.y + Math.cos(rad) * radius;
								angle += intern;
							}
							
							var array:Array= sceneMgr.detectBoundingBoxCollision(endComponent.name);
							
							if(startComponent && endComponent){
								var cableID:String = cableObj['cableId'];
								var connector:DynamicConnector = new DynamicConnector(ObjectUtil.getClassInfo(Cable).name + cableID);
								connector.lineThickness = cableObj['isMainRoad']=='是'?4:2;
								connector.lineColor = 0x66A6D9;//lineColors[j%lineColors.length];
								connector.connect(startComponent.centerAnchor, endComponent.centerAnchor);
								//Alert.show("" + cableObj['delFlg']);
								connector.alpha = cableObj['delFlg']=="启用"?1:0.1;
								connector.editable = false; 
								connector.contextMenu = cableContextMenu;
								var cable:Cable  = new Cable();
								cable.cableId = cableID;
								cable.cableStartId = startID
								cable.cableEndId = endID;
								connector.customData = cable;   
								
								sceneMgr.addEntity(connector);
							}
						}
					}
				}else{
					Alert.show("站点不存在，\n请确认站点名称是否正确。","提示");
				}
			}
			private function connectorHander(event:Event):void {
				Alert.show("An event occurred.");
			}
			protected function clickCable():void{
				Alert.show("光缆","");
			}
			
			/**
			 * 查询站点关系 错误提示
			 */
			protected function getSiteRelationBySiteNameResult_faultHandler(event:FaultEvent):void
			{
				Alert.show("查询失败","出错了");
			}
			
			[Bindable]
			public var SiteListCntMenu:ContextMenu;    //站点列表 右键菜单
			
			protected function siteContainer_dragEnterHandler(event:DragEvent, format:String):void
			{
				DragManager.acceptDragDrop(IUIComponent(event.target));//允许List接收释放  
				/*
				if(event.dragSource.hasFormat(format)){  
					DragManager.acceptDragDrop(IUIComponent(event.target));//允许List接收释放  
				}  
				*/
			}
			
			protected function siteContainer_dragDropHandler(event:DragEvent, format:String):void
			{
				var site:Site  = siteDataGrid.selectedItem as Site;
				var siteName:String  = site.siteName;
				/*
				var obj:DragSource  = event.dragSource ; 
				var site:Site = obj.dataForFormat(format) as Site;
				var siteName:String  = site.siteName;
				//var siteName:String  = obj.dataForFormat(format)['siteName'];
				//Alert.show(String(obj.dataForFormat(format)['siteName']));
				getSiteRelationBySiteName(siteName, 1);
				var degree:int = 1;
				if(degreeOne.selected){
					degree = 1;
				}else if(degreeTwo.selected){
					degree = 2;
				}else if(degreeThree.selected){
					degree = 3;
				}
				getSiteRelationBySiteName(siteName, degree);
				*/
				searchRelationKey.text = siteName;
				schemaNameLabel.text = "【" + searchRelationKey.text + "】站点关系图";
				schemaNote.text = "";
				searchSiteSchema();
			}
			
			protected function siteDataGrid_dragStartHandler(e:DragEvent, format:String):void
			{
				/*
				//var iu:IUIComponent=e.currentTarget as IUIComponent;  
				var dataGrids:DataGrid = e.currentTarget as DataGrid;
				var site:Site  = dataGrids.selectedItem as Site;
				var iu:IUIComponent= e.currentTarget as IUIComponent;  
				//Alert.show(obj['siteName']);
				var ds:DragSource=new DragSource();  
				ds.addData({"site": site}, format); //设置一个标号format  
				DragManager.doDrag(iu,ds, e);  
				*/
			}

			protected function toggleMap():void{
				areaMapsOutlineContainer.visible = !areaMapsOutlineContainer.visible;
			}
			
			/**
			 * 地图轮廓大小调整
			 */
			protected function fzoutline_creationCompleteHandler(event:FlexEvent):void
			{
				var curMap:FZMapsOutline = event.currentTarget as FZMapsOutline;
				curMap.scaleX = areaSvgContainer.width/curMap.width ;
				curMap.scaleY = areaSvgContainer.height/curMap.height;
				
				//Alert.show( areaSvgContainer.width + ","+ areaSvgContainer.height + ","+  curMap.width + "," + curMap.height) ;
			}
			
			public function onMouseDownMaps(event:MouseEvent):void{
				var areaContainer:BorderContainer = event.currentTarget as BorderContainer;
				g_areaName = areaContainer.id;
				getSchemaVOByAreaName(g_areaName);
				searchSite(g_areaName);
				//areaMapsOutlineContainer.title = "福州市" +  areaName;
				toggleMap();
			}
			
			protected function getSiteInfoById(arg0:String):void
			{
				getSiteInfoByIdResult.token = siteEquip.getSiteInfoById(arg0);
			}
			protected function getSiteInfoByIdResult_resultHandler(event:ResultEvent):void
			{
				var site:Site = event.result as Site;
				showInfoWin.title = site.siteName;    
				PopUpManager.addPopUp(showInfoWin, this, true);  
				PopUpManager.centerPopUp(showInfoWin);  
				equipInfoGrid.dataProvider = new Array(
					//{name: area.areaId},
					{name: site.siteName },
					{name: site.siteAdress},
					{name: site.connactName},
					{name: site.connactNumber},
					{name: site.descp}
				);
			}
			
			protected function curAreaName_clickHandler(event:MouseEvent):void
			{
				searchRelationKey.text = '';
				getSchemaVOByAreaName(g_areaName);
			}
			
			/**
			 * 得到光缆视图数据对象
			 */
			protected function getCableVOById(arg0:String):void
			{
				getCableVOByIdResult.token = equip.getCableVOById(arg0);
			}
			protected function getCableVOByIdResult_resultHandler(event:ResultEvent):void
			{
				var cable:Cable = event.result as Cable;
				showCableWin.title = cable.cableName;    
				PopUpManager.addPopUp(showCableWin, this, true);  
				PopUpManager.centerPopUp(showCableWin);  
				showCableGrid.dataProvider = new Array(
					//{name: area.areaId},
					{name: cable.cableName },
					{name: cable.cableStartId},
					{name: cable.cableEndId},
					{name: cable.constructionUnitId},
					{name: cable.cableType},
					{name: cable.cableLength},
					{name: cable.fiberId},
					{name: cable.isMainRoad},
					{name: cable.layingType},
					{name: cable.runTime},
					{name: cable.descp}
				);
				
			}
			
			
			protected function getDefaultSchema():void
			{
				getDefaultSchemaResult.token = siteSchema.getDefaultSchema();
			}
			
			
			protected function getSchemaVOByAreaName(arg0:String):void
			{
				getSchemaVOByAreaNameResult.token = siteSchema.getSchemaVOByAreaName(arg0);
			}
			
			protected function getSchemaVOByAreaNameResult_faultHandler(event:FaultEvent):void
			{
				Alert.show("获取视图失败","出错啦");
			}
			
			[Bindable]
			public var allArea:ArrayCollection;
			private function myLabelToItemFunction(input:String):*
			{
				<!-- Returns object that matches items in dataProvider -->
				return {ingredient:input, category:"mystery"};
			}   
			
			protected function getAllArea():void
			{
				getAllAreaResult.token = areaSchema.getAllArea();
			}
			
			protected function getAllAreaResult_resultHandler(event:ResultEvent):void
			{
				allArea = event.result as ArrayCollection;
				
				areaComboBox.selectedIndex = 0;
				for (var i:int = 0; i < allArea.source.length; i++) 
				{
					var area:Area = allArea.source[i] as Area;
					if(area.areaName == g_areaName){
						areaComboBox.selectedIndex = i;
						break;
					}
				}
				
				
			}
			
			protected function areaComboBox_creationCompleteHandler(event:FlexEvent):void
			{
				getAllArea();
			}
			
			protected function areaComboBox_changeHandler(event:IndexChangeEvent):void
			{
				var newIndex:int = event.newIndex;
				g_areaName = allArea.source[newIndex].areaName;
				searchRelationKey.text = '';
				g_SearchSiteCondition.keyWord = searchSiteListKey.text = '';
				searchSite(g_areaName);
				getSchemaVOByAreaName(g_areaName);
			}
			
		]]>
	</fx:Script>
		<s:layout>
			<s:VerticalLayout gap="-1"  ></s:VerticalLayout>
		</s:layout>
	<!--
	<mx:ApplicationControlBar dock="true">
		<mx:Label text="福州市电业局" />
	</mx:ApplicationControlBar>
	-->
		<s:BorderContainer  borderAlpha="1"  borderVisible="false" backgroundAlpha="0.0" width="100%" height="{this.height-siteGrid.height}" dropShadowVisible="false">
			<s:layout>
				<s:HorizontalLayout gap="-1" paddingLeft="10" paddingRight="10" paddingTop="10"  />
			</s:layout>
			<s:BorderContainer id="siteContainer"  borderAlpha="1" backgroundAlpha="0" width="100%" height="100%" visible="true" dropShadowVisible="false"
								dragEnter="siteContainer_dragEnterHandler(event,'siteInfo')"
								dragDrop="siteContainer_dragDropHandler(event,'siteInfo')">
				<s:Group id="xContainer" width="100%" height="100%" x="0" y="0"  >
					<xtreme:XtremeComponent name="view" id="view" width="100%" height="100%" />
				</s:Group>
				
				<mx:HBox id="xToolBar" backgroundAlpha="0" width="100%" paddingBottom="10" paddingLeft="10" paddingTop="10" paddingRight="10">
					<mx:Image source="@Embed('assets/buttons/btn_maptag.png')"  buttonMode="true" click="toggleMap()" width="20" height="20" 
							  toolTip="地图选区"></mx:Image>
					<s:Group toolTip="网络提示">
						<s:layout>
							<s:HorizontalLayout  verticalAlign="middle"/>
						</s:layout>
						<!--
						<s:Label id="curAreaName"  text="{'〖'+ areaName+'〗'}" fontSize="14" toolTip="默认视图 " click="curAreaName_clickHandler(event)" fontFamily="Times New Roman" buttonMode="true" > </s:Label>
						
						<s:ComboBox id="areaComboBox" 
							dataProvider="{complexDP}" 
							labelToItemFunction="{myLabelToItemFunction}"
							selectedIndex="0" change="areaComboBox_changeHandler(event)"
							labelField="areaName" creationComplete="areaComboBox_creationCompleteHandler(event)"  />   
						-->
						<s:Label text="福州市" fontSize="14" toolTip="福州市" fontFamily="Times New Roman" />	
						<s:DropDownList id="areaComboBox" prompt="Select One" toolTip="辖区"
										 dataProvider="{allArea}"
										labelField="areaName"
										change="areaComboBox_changeHandler(event);" creationComplete="areaComboBox_creationCompleteHandler(event)"  />
						<mx:LinkButton label ="默认视图" click="searchRelationKey.text = '';getSchemaVOByAreaName(g_areaName)" toolTip="区域关注视图" />
						<mx:Image source="@Embed('assets/btn_info_48.png')" width="18" height="18" toolTip="视图信息">
						</mx:Image>
						<s:Label id="schemaNameLabel" text="" fontSize="14" toolTip="视图名称" fontFamily="Times New Roman" >			
						</s:Label>
						<s:Label id="schemaNote" text="" fontSize="14" toolTip="备注" fontFamily="Times New Roman">	
						</s:Label>
					</s:Group>
					<!--
					<mx:Image id="refreshRelationBtn" click="searchBtn_clickHandler(event)"  source="@Embed(source='assets/buttons/btn_refresh_24.png')" buttonMode="true" width="24" height="24" toolTip="刷新"/>
					-->
					<mx:Spacer width="100%"/>
					<s:Group toolTip="光缆提示">
						<s:layout>
							<s:HorizontalLayout  verticalAlign="middle"/>
							</s:layout>
						<s:HGroup toolTip="是否是主干" visible="false" >
							<s:RadioButton groupName="isMain" selected="true" value="check"  id="allCable"   label="全部"   />
							<s:RadioButton groupName="isMain" selected="true"  id="isMain"   label="主干"   />
							<s:RadioButton groupName="isMain"  id="notMain" label="非主干"  />
						</s:HGroup>
						<s:Line xFrom="10" xTo="30" yFrom="20" yTo="20" >
							<s:stroke>
								<s:SolidColorStroke color="0x111111" weight="1" caps="square"/>
							</s:stroke>
						</s:Line>
						<s:Label text="非主干" />
						<s:Line xFrom="40" xTo="60" yFrom="20" yTo="20">
							<s:stroke>
								<s:SolidColorStroke color="0x111111" weight="3" caps="square"/>
							</s:stroke>
						</s:Line>
						<s:Label text="主干"   />
					</s:Group>
					<s:Group toolTip="搜站点关系">
						<s:layout>
							<s:HorizontalLayout />
						</s:layout>
						<s:HGroup toolTip="关联层数" >
							<s:RadioButton groupName="paymentType"  id="degreeOne"   label="1层"  selected="true" />
							<s:RadioButton groupName="paymentType"  id="degreeTwo" value="check"   label="2层" />
							<!--
							<s:RadioButton groupName="paymentType"  id="degreeThree" enabled="false"   value="credit"    label="3层"   />
							-->
						</s:HGroup>
						<s:TextInput id="searchRelationKey" keyDown="searchKey_keyDownHandler(event)" maxChars="15" toolTip="关键字">
						</s:TextInput>
						<mx:LinkButton label="刷新" click="searchBtn_clickHandler(event)" fontWeight="bold"   />
						<!--
						<mx:Image id="searchRelationBtn" click="searchBtn_clickHandler(event)"  source="@Embed(source='assets/buttons/btn_refresh_24.png')" buttonMode="true" width="24" height="24" toolTip="搜索"/>
						
						<mx:Image source="@Embed('assets/buttons/btn_full_screen_24.png')" toolTip="全屏" buttonMode="true"  width="20" height="20" >
						</mx:Image>
						-->
						<mx:Image id="expandBtn" source="@Embed('assets/buttons/btn_more_24.png')" toolTip="更多操作" buttonMode="true"   width="20" height="20"
								  click="moreOperate.visible = !moreOperate.visible;">
						</mx:Image>
					</s:Group>
				</mx:HBox>
				
				<s:BorderContainer id="moreOperate" visible="false" 
						 y="{xToolBar.height}" x="{xToolBar.width-moreOperate.width}" borderAlpha="0.7" >
					<s:layout>
						<s:VerticalLayout paddingBottom="10" paddingLeft="10" paddingRight="10" paddingTop="10" />
					</s:layout>
					<!--
					<mx:Image id="expandBtn" source="@Embed('assets/buttons/btn_expand_24.png')" toolTip="其它" buttonMode="true"  width="24" height="24"
					click="expandBtn_clickHandler(event)">
					</mx:Image>
					-->
					<!--
					<s:BorderContainer borderVisible="false">
						<s:layout>
							<s:HorizontalLayout  />
						</s:layout>
						<s:Label text="连接关系" paddingTop="5" paddingLeft="5" />
						<mx:Image id="siteBetween" source="@Embed('assets/buttons/btn_connector_24.png')" toolTip="站点连接" buttonMode="true"  width="20" height="20" >
						</mx:Image>
						<s:TextInput id="searchRelationStart" keyDown="searchKey_keyDownHandler(event)" maxChars="15" toolTip="站点">
						</s:TextInput>
						<s:TextInput id="searchRelationEnd" keyDown="searchKey_keyDownHandler(event)" maxChars="15" toolTip="站点">
						</s:TextInput>
						<mx:LinkButton label="查询" />
					</s:BorderContainer>
					-->
					<s:BorderContainer borderVisible="false">
						<mx:Form width="100%" height="100%">
							<mx:FormHeading label="站点连接情况查询"/>
							
							<mx:FormItem label="站点1">
								<mx:TextInput id="fname" width="200"/>
							</mx:FormItem>
							
							<mx:FormItem label="站点2">
								<mx:TextInput id="phone" width="200"/>
							</mx:FormItem>
						</mx:Form>
					</s:BorderContainer>
					<mx:HBox width="100%" >
						<mx:Spacer width="100%" />
						<mx:LinkButton label="搜索" fontWeight="bold" />
						<mx:LinkButton label="隐藏" click="moreOperate.visible=false;" />
					</mx:HBox>
				</s:BorderContainer>
				
				<s:BorderContainer id="areaMapsOutlineContainer"   borderAlpha="1" width="40%" height="100%" dropShadowVisible="false" visible="false"  >
					<s:BorderContainer id="areaSvgContainer" backgroundAlpha="1" borderVisible="false" width="100%"  height="100%"
									   creationComplete="areaSvgContainer.contentGroup.clipAndEnableScrolling = true"  >
						<cedomaps:FZMapsOutline id="fzoutline" clickHander="{onMouseDownMaps}"  creationComplete="fzoutline_creationCompleteHandler(event)" />
					</s:BorderContainer>
					
					<mx:HBox backgroundAlpha="0" width="100%" paddingBottom="10" paddingLeft="10" paddingTop="10" paddingRight="10">
						<mx:Image source="@Embed('assets/buttons/btn_hide_32.png')"  buttonMode="true" click="toggleMap()" width="32" height="32" 
							  toolTip="隐藏地图"></mx:Image>
					</mx:HBox>
				</s:BorderContainer>
				
			</s:BorderContainer>
		</s:BorderContainer>	
		<s:BorderContainer id="siteGrid" borderAlpha="1"   borderVisible="false" backgroundAlpha="0.0" width="100%"  dropShadowVisible="false">
			<s:layout>
				<s:VerticalLayout  gap="1" paddingBottom="10" paddingLeft="10" paddingRight="10" />
			</s:layout>
			<s:BorderContainer id="siteGridP" width="100%" borderAlpha="1"  backgroundAlpha="0"  >
				<s:layout>
					 <s:VerticalLayout paddingBottom="5"  />
				 </s:layout>
				<mx:HBox backgroundAlpha="0"  horizontalAlign="left" width="100%" paddingTop="5" paddingLeft="5">
					<s:HGroup toolTip="搜索域" >
						<s:RadioButton groupName="scopeType" selected="true"  id="scope_sitename"   label="站点名称"   />
						<s:RadioButton groupName="scopeType"  id="scope_siteAddress" value="check" label="站点位置"  />
						<s:RadioButton groupName="scopeType" id="scope_contact"   value="credit"  label="站点联系人"   />
					</s:HGroup>
					<s:Label  paddingTop="5" paddingLeft="5" text="中包含关键字" />
					<s:TextInput id="searchSiteListKey"  maxChars="15"  keyDown="searchSiteListKeyBtn_keyUpHandler(event)" toolTip="关键字">
					</s:TextInput>
					<mx:LinkButton id="searchSiteListKeyBtn" fontWeight="bold" label="搜索" click="searchSiteListKeyBtn_clickHandler(event)" />   
					<mx:LinkButton id="searchSiteListAllBtn"  label="重置" click="searchSiteListAllBtn_clickHandler(event)"   />   
					<s:Label id="siteTotalRecords" paddingTop="5" paddingLeft="5">
					</s:Label>
					<mx:Spacer  width="100%"/>
					<s:Label  paddingTop="5" paddingLeft="5" text="拖动站点到 ↑视图窗口↑，搜索站点关系。" />
				</mx:HBox>  
				<mx:DataGrid id="siteDataGrid" paddingTop="0" width="100%" dataProvider="{getListByConditionResult.lastResult}"
							contextMenu="{SiteListCntMenu}" dragEnabled="true" 
							dragStart="siteDataGrid_dragStartHandler(event,'siteInfo')">
					<mx:columns>
						<!--<mx:DataGridColumn dataField="siteId" headerText="站点编码" />-->
						<mx:DataGridColumn dataField="siteName" headerText="站点名称" />
						<mx:DataGridColumn dataField="siteAdress" headerText="站点位置" />
						<mx:DataGridColumn dataField="connactName" headerText="联系人" />
						<mx:DataGridColumn dataField="connactNumber" headerText="联系电话" />
						<mx:DataGridColumn dataField="descp" headerText="备注"/>
					</mx:columns>
				</mx:DataGrid>
				<mx:HBox backgroundAlpha="0" verticalAlign="middle" horizontalAlign="center" width="100%">
					<mx:Label   text="第 0 页/共 0 页" id="pagedetail"  />  
					<mx:LinkButton label="首页" id="firstPage"  click="gotoPage(event)"   />  
					<mx:LinkButton label="上一页" id="prePage" click="gotoPage(event)" />  
					<mx:LinkButton label="下一页" id="nextPage" click="gotoPage(event)" />  
					<mx:LinkButton label="末页"  id="lastPage" click="gotoPage(event)" />  
					<mx:NumericStepper id="inputpage" stepSize="1" minimum="1" maximum="1" />  
					<mx:LinkButton id="jumpTo" label="跳转" click="gotoPage(event)"  />    
				</mx:HBox>  
			</s:BorderContainer>
		</s:BorderContainer>
</s:Application>
